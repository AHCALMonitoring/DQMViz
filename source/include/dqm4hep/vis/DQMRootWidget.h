  /// \file DQMRootWidget.h
/*
 *
 * DQMRootWidget.h header template automatically generated by a class generator
 * Creation date : lun. oct. 12 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMROOTWIDGET_H
#define DQMROOTWIDGET_H

// -- root headers
#include <TQtWidget.h>

// -- qt headers
#include <QMenu>

// -- dqm4hep headers
#include "dqm4hep/vis/DQMGuiMonitorElement.h"

class TImage;

namespace dqm4hep
{

class DQMMonitoring;
class DQMMonitorElement;
class DQMCanvas;

/** DQMRootWidget class
 */
class DQMRootWidget : public TQtWidget 
{
	Q_OBJECT

public:
	/** Constructor
	 */
	DQMRootWidget(DQMMonitoring *pMonitoring, QWidget *pParent = 0);

	/** Destructor
	 */
	~DQMRootWidget();

	/** Get the monitoring instance
	 */
	DQMMonitoring *getMonitoring() const;

	/** Set canvas on which the the root widget is drawn
	 */
	void setCanvas(DQMCanvas *pCanvas);

	/** Get the canvas on which the the root widget is drawn
	 */
	DQMCanvas *getCanvas() const;

	/** Handle mouse double click event on the widget
	 */
	virtual void mouseDoubleClickEvent(QMouseEvent *e);

	/** Handle mouse release event on the widget
	 */
	virtual void mouseReleaseEvent(QMouseEvent *e);

	/** Post draw function with a 'fake' update of the widget
	 */
	virtual void postDraw();

	/** Draw an image saying "no vis available"
	 */
	virtual void drawNoVis();

	/** Draw the monitor element on the canvas
	 */
	virtual void draw(DQMGuiMonitorElement *pMonitorElement);

	/** Get the "no vis" image, create it if not (proxy method)
	 */
	virtual TImage *getNoVisImage();

	/** Get the current monitor element draw on the root canvas
	 */
	virtual DQMGuiMonitorElement *getCurrentMonitorElement() const;

private slots:
	/**
	 */
	void showContextMenu(const QPoint &point);

	/**
	 */
	void moveCanvas();

	/**
	 */
	void queryUpdate();

	/**
	 */
	void removeCanvas();

	/**
	 */
	void setDrawOption();

	/**
	 */
	void setDrawOptionFromDialog();

	/**
	 */
    void unzoom();

	/**
	 */
    void saveAs();

	/**
	 */
    void openROOTPanel();

	/**
	 */
    void showMonitorElementInfo();

	/**
	 */
    void showQTestResults();

    /**
     */
    void redraw();

protected:
	/**
	 */
	QMenu *createContextMenu() const;

	/**
	 */
	void addDrawOptions(QMenu *pMenu) const;

	/**
	 */
	void updateMonitorElement(DQMGuiMonitorElement *pNewGuiMonitorElement);

protected:

	DQMMonitoring          *m_pMonitoring;
	DQMCanvas              *m_pCanvas;
	TImage                 *m_pNoVisImage;
	DQMGuiMonitorElement   *m_pCurrentMonitorElement;
}; 

} 

#endif  //  DQMROOTWIDGET_H
