  /// \file DQMMonitoringModel.h
/*
 *
 * DQMMonitoringModel.h header template automatically generated by a class generator
 * Creation date : lun. oct. 12 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMMONITORINGMODEL_H
#define DQMMONITORINGMODEL_H

#include <QObject>
#include <QIcon>
#include <QColor>

#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMStorage.h"

namespace dqm4hep
{

class DQMMonitoring;
class DQMGuiMonitorElementClient;
class DQMGuiMonitorElement;

/** DQMMonitoringModel class
 */
class DQMMonitoringModel : public QObject
{
	Q_OBJECT

	typedef std::vector<DQMGuiMonitorElement*> DQMGuiMonitorElementList;

public:
	/** Constructor
	 */
	DQMMonitoringModel(DQMMonitoring *pMonitoring);

	/** Destructor
	 */
	virtual ~DQMMonitoringModel();

	/** Get the monitoring instance
	 */
	DQMMonitoring *getMonitoring() const;

public slots:
	/** Update the monitor element in the model
	 *  Add or replace if exists
	 */
	virtual void updateMonitorElement(DQMMonitorElementPtr &monitorElement);

	/** Update the monitor element in the model
	 *  Add or replace if exists
	 */
	virtual void updateMonitorElement(DQMGuiMonitorElement *pMonitorElement);

	/** Remove the monitor element form the model
	 */
	virtual void removeMonitorElement(DQMGuiMonitorElement *pMonitorElement);

	/**
	 */
	virtual void removeMonitorElement(const std::string &collectorName, const std::string &moduleName,
			const std::string &fullPath, const std::string &name);

	/** Clear all the model contents
	 */
	void clear();

	/** Clear all the elements of the given collector
	 */
	void clear(const std::string &collectorName);

	/** Clear all the elements of the given collector and module
	 */
	void clear(const std::string &collectorName, const std::string &moduleName);

public:
	/** Whether the monitor element exists
	 */
	virtual bool monitorElementExists(DQMGuiMonitorElement *pMonitorElement) const;

	/** Factory method that create a wrapper around a monitor element in the Qt framework.
	 *  The created monitor element is not registered in the model.
	 *  Use updateMonitorElement(elt) to register it
	 */
	virtual DQMGuiMonitorElement *createGuiMonitorElement(DQMMonitorElementPtr &monitorElement) const;

	/**
	 */
	DQMGuiMonitorElement *getOrCreateGuiMonitorElement(const std::string &collectorName, const std::string &moduleName,
			const std::string &fullPath, const std::string &name);

	/**
	 */
	void loadMonitorElementInfoList(const std::string &collectorName, const DQMMonitorElementInfoList &nameList);

	/** Factory method that create a wrapper around a monitor element in the Qt framework.
	 *  The created monitor element is not registered in the model.
	 *  Use updateMonitorElement(elt) to register it
	 */
	virtual DQMGuiMonitorElement *createGuiMonitorElement(const std::string &collectorName, const std::string &moduleName,
			const std::string &fullPath, const std::string &name) const;

	/** Find and return a monitor element identified by its collector name, module name, full path and name
	 *  Return NULL if not found
	 */
	virtual DQMGuiMonitorElement *findMonitorElement(const std::string &collectorName, const std::string &moduleName,
			const std::string &fullPath, const std::string &name) const;

signals:
	/** Signal emitted when a monitor element is added to the model
	 */
	void monitorElementAdded(DQMGuiMonitorElement *pMonitorElement);

protected:

	DQMMonitoring                          *m_pMonitoring;
	DQMGuiMonitorElementList                m_monitorElementList;
};

} 

#endif  //  DQMMONITORINGMODEL_H
