/*
 *
 * DQMCanvasArea.h header template automatically generated by a class generator
 * Creation date : mar. oct. 13 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMCANVASAREA_H
#define DQMCANVASAREA_H

// -- qt headers
#include <QMdiArea>

namespace dqm4hep
{

class DQMMonitoring;
class DQMGuiMonitorElement;
class DQMCanvas;

/** DQMCanvasArea class
 */
class DQMCanvasArea : public QMdiArea
{
public:
	/** Constructor
	*/
	DQMCanvasArea(DQMMonitoring *pMonitoring);

	/** Destructor
	 */
	virtual ~DQMCanvasArea();

	/** Get the monitoring instance
	 */
	DQMMonitoring *getMonitoring() const;

	/** Whether the monitor elemnt is drawn.
	 *  Comparison done by ptr or full name (path + name)
	 */
	bool isDrawn(DQMGuiMonitorElement *pMonitorElement) const;

	/** Remove a canvas from the area.
	 *  The canvas is not deleted.
	 *  No action performed if the area does not own the canvas
	 *  Return whether the canvas has been removed
	 */
	bool removeCanvas(DQMCanvas *pCanvas, bool deleteLater = false);

	/** Add a canvas on the area.
	 *  No action performed if the canvas is already own by the area
	 */
	void addCanvas(DQMCanvas *pCanvas);

	/** Get the number of drawn canvases
	 */
	int canvasCount() const;

	/** Create a canvas, add it to the area, draw the monitor
	 *  element on the root canvas and return it back
	 */
	DQMCanvas *createCanvas(DQMGuiMonitorElement *pMonitorElement);

	/** Get the canvas on which the monitor element is drawn
	 */
	DQMCanvas *getCanvas(DQMGuiMonitorElement *pMonitorElement) const;

	/** Get canvas at given index
	 */
	DQMCanvas *getCanvas(int index) const;

	/** Whether the area contains the given canvas
	 */
	bool contains(DQMCanvas *pCanvas) const;

public slots:
	/** Draw the monitor element.
	 *  Create a new canvas if not already drawn.
	 *  Return the canvas on which the element is drawn
	 */
	DQMCanvas *draw(DQMGuiMonitorElement *pMonitorElement);

	/** Clear the canvas area
	 */
	void clear();

private:
	/**
	 */
	void dragEnterEvent(QDragEnterEvent *event);

	/**
	 */
	void dropEvent(QDropEvent *event);

protected:

	DQMMonitoring              *m_pMonitoring;
}; 

} 

#endif  //  DQMCANVASAREA_H
