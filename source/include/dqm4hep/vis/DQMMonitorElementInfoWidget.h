  /// \file DQMMonitorElementInfoWidget.h
/*
 *
 * DQMMonitorElementInfoWidget.h header template automatically generated by a class generator
 * Creation date : mar. aoï¿½t 11 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMMONITORELEMENTINFOWIDGET_H
#define DQMMONITORELEMENTINFOWIDGET_H

// -- qt headers
#include <QWidget>
#include <QCheckBox>
#include <QLabel>
#include <QTextEdit>
#include <QGroupBox>
#include <QComboBox>
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QFormLayout>

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMMonitorElement.h"
#include "dqm4hep/DQMQualityTest.h"
#include "dqm4hep/vis/DQMGuiMonitorElement.h"

namespace dqm4hep
{

class DQMGuiMonitorElement;

/** DQMMonitorElementInfoWidget class
 */
class DQMMonitorElementInfoWidget : public QWidget 
{
	Q_OBJECT
public:
	/**
	 */
	enum Tab
	{
		MONITOR_ELEMENT_INFO = 0,
		QUALITY_TEST_RESULTS = 1
	};

	/** Constructor
	 */
	DQMMonitorElementInfoWidget(QWidget *pParentWidget = NULL);

	/** Constructor
	 */
	DQMMonitorElementInfoWidget(DQMGuiMonitorElement *pGuiMonitorElement, QWidget *pParentWidget = NULL);

	/** Destructor
	 */
	~DQMMonitorElementInfoWidget();

	/** Fill the widget information with the given monitor element
	 */
	void fillInfos(DQMGuiMonitorElement *pGuiMonitorElement);

	/** Show the given tab
	 */
	void showTab(Tab tab);

private slots:
	/** Fill the widget information
	 */
	void fillInfos();

	/**
	 */
	void loadQualityTestResult(int index);

	/**
	 */
	void handleUpdateCheckStateChanged(int state);

private:
	/**
	 */
	void buildWidget();

	QCheckBox          *m_pUpdateBox;

	QTabWidget         *m_pTabWidget;

	// monitor element
	QLabel             *m_pMonitorElementNameLabel;
	QLabel             *m_pMonitorElementTitleLabel;
	QLabel             *m_pMonitorElementTypeLabel;
	QLabel             *m_pMonitorElementResetPolicyLabel;
	QTextEdit          *m_pMonitorElementDescriptionTextEdit;
	QLabel             *m_pMonitorElementDrawOptionLabel;
	QLabel             *m_pMonitorElementRunNumberLabel;
	QLabel             *m_pMonitorElementFullPathLabel;

	// quality tests
	QLabel             *m_pNQTestsLabel;
	QLabel             *m_pNSuccessQTestsLabel;
	QLabel             *m_pNFailQTestsLabel;
	QLabel             *m_pMeanQualityQTestsLabel;

	QComboBox          *m_pQTestsComboBox;
	QLabel             *m_pQualityTestTypeLabel;
	QTextEdit          *m_pQualityTestMessageEdit;
	QLabel             *m_pQualityTestQualityLabel;
	QLabel             *m_pQualityTestSuccessLabel;

	std::map<std::string, DQMQualityTestResult>    m_qualityTestResultMap;

	DQMGuiMonitorElement  *m_pGuiMonitorElement;
};

} 

#endif  //  DQMMONITORELEMENTINFOWIDGET_H
