  /// \file DQMMonitoringView.h
/*
 *
 * DQMMonitoringView.h header template automatically generated by a class generator
 * Creation date : lun. oct. 12 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMMONITORINGVIEW_H
#define DQMMONITORINGVIEW_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMXmlIO.h"
#include "dqm4hep/DQMLogger.h"

// -- qt headers
#include <QObject>
#include <QMainWindow>
#include <QPushButton>

namespace dqm4hep
{

class DQMMonitoring;
class DQMMonitorElementView;
class DQMCanvasView;
class DQMLoggerWidget;

/** DQMMonitoringView class
 */ 
class DQMMonitoringView : public QObject, public DQMXmlIO, public DQMLogger
{
	Q_OBJECT

public:
	/** Constructor
	 */
	DQMMonitoringView(DQMMonitoring *pMonitoring);

	/** Destructor
	 */
	~DQMMonitoringView();

	/** Get the monitoring instance
	 */
	DQMMonitoring *getMonitoring() const;

	/** Log a message in the application. Log level is 'MESSAGE'
	 */
	void log(const std::string &message);

	/** Log in the logger with a log level
	 */
	void log(LogLevel level, const std::string &message);

	/** Export settings to xml element
	 */
	TiXmlElement *toXml() const;

	/** Import settings from xml element
	 */
	void fromXml(TiXmlElement *const pXmlElement);

	/** Build the view.
	 *  Should be called once
	 */
	void buildView();

	/**
	 */
	void showView();

	/**
	 */
	void hideView();

	/**
	 */
	DQMCanvasView *getCanvasView() const;

	/**
	 */
	DQMMonitorElementView *getMonitorElementView() const;

	/**
	 */
	QMainWindow *getMainWindow() const;

	/**
	 */
	void clear();

protected:
	/**
	 */
	void buildMenus();

	/**
	 */
	void buildCentralView();

	/**
	 */
	void buildStatusBar();

private slots:
	/**
	 */
	void handleAutoUpdateButtonClicked();

protected:

	bool                       m_viewBuilt;               ///< Whether the view has been built

	DQMMonitoring              *m_pMonitoring;            ///< The monitoring instance.
	DQMCanvasView              *m_pCanvasView;            ///< The canvas view to display monitor elements.
	DQMMonitorElementView      *m_pMonitorElementView;    ///< The monitor element view to display the element hierarchy.
	DQMLoggerWidget            *m_pLoggerWidget;          ///< The main logger widget of the application
	QMainWindow                *m_pMainWindow;            ///< The main window containing the whole view.
	QPushButton                *m_pAutoUpdateButton;      ///< The push button to start/stop auto queries to collectors
};

} 

#endif  //  DQMMONITORINGVIEW_H
