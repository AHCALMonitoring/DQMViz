  /// \file DQMGuiMonitorElement.h
/*
 *
 * DQMGuiMonitorElement.h header template automatically generated by a class generator
 * Creation date : lun. oct. 12 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMGUIMONITORELEMENT_H
#define DQMGUIMONITORELEMENT_H

#include <QObject>

#include "dqm4hep/DQM4HEP.h"

namespace dqm4hep
{

class DQMMonitorElement;
class DQMMonitoringModel;

/** DQMGuiMonitorElement class
 */ 
class DQMGuiMonitorElement : public QObject
{
	Q_OBJECT

	friend class DQMMonitoringModel;

public:
	/** Constructor with a monitoring instance
	 */
	DQMGuiMonitorElement(DQMMonitorElementPtr &pMonitorElement);

	/** Destructor
	 */
	virtual ~DQMGuiMonitorElement();

	/** Get the wrapped monitor element
	 */
	DQMMonitorElementPtr getMonitorElement() const;

	/** Update the gui monitor element with a new monitor element
	 */
	void update(DQMMonitorElementPtr &monitorElement);

	/** Whether the two monitor elements area equal
	 */
	bool equals(DQMMonitorElementPtr &monitorElement) const;

	/** Whether the two monitor elements area equal
	 */
	bool equals(DQMGuiMonitorElement *pGuiMonitorElement) const;

	/** Set the monitor element draw option
	 */
	void setDrawOption(const std::string &drawOption);

	/** Set the monitor element description
	 */
	void setDescription(const std::string &description);

	/** Set the monitor element quality
	 */
	void setQuality(DQMQuality quality);

signals:
	/** Signal emitted when the properties of the monitor element or the monitor element pointer have been updated
	 */
	void updated();

protected:

	DQMMonitorElementPtr            m_pMonitorElement;
};

typedef std::vector<DQMGuiMonitorElement*> DQMGuiMonitorElementList;

} 

#endif  //  DQMGUIMONITORELEMENT_H
