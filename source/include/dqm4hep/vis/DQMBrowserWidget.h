/*
 *
 * DQMBrowserWidget.h header template automatically generated by a class generator
 * Creation date : ven. mai 8 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMBROWSERWIDGET_H
#define DQMBROWSERWIDGET_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/vis/DQMGuiMonitorElementClient.h"

// -- qt headers
#include <QWidget>
#include <QGroupBox>
#include <QComboBox>
#include <QLineEdit>
#include <QDialog>
#include <QMutex>
#include <QTreeWidget>
#include <QKeyEvent>
#include <QTimer>

namespace dqm4hep
{

class DQMMonitoring;

/** DQMBrowserWidget class.
 *  A browser to find monitor elements over the network.
 *  Uses a DimBrowser to perform the service finding,
 *  a monitor element client as the interface to the server
 *  and a qt handler for request call back functions received
 *  by the server.
 */ 
class DQMBrowserWidget : public QWidget
{
	Q_OBJECT

public:
	/** Constructor
	 */
	DQMBrowserWidget(DQMMonitoring *pMonitoring);

	/** Destructor
	 */
	~DQMBrowserWidget();

	/** Get the monitoring instance
	 */
	DQMMonitoring *getMonitoring() const;

	/** Get the collector name
	 */
	QString getCollectorName() const;

public slots:
	/** Update the collector list (combo box)
	 */
	void updateCollectorList();

private:
	/** Build the monitor element request to send to the collector server
	 */
	void buildMonitorElementRequest(DQMMonitorElementRequest &request) const;

private slots:
	/**
	 */
	void handleCollectorSelection(int index);

	/** Send the query for monitor element browsing on the collector
	 */
	void querySearch();

	/** Clear the search interface
	 */
	void clearSearch();

	/** Fill the module name list
	 */
	void fillModuleNameList(const DQMMonitorElementInfoList &nameList);

	/** Check/uncheck the given item
	 */
	void checkItem(QTreeWidgetItem *pItem, int);

	/** Check all the selected items
	 */
	void checkSelectedElements();

	/** Handle the key press event.
	 *    - Key Alt+A : select all elements in the list
	 *    - Key enter : check all the selected items
	 */
	void handleKeyPressEvent(QKeyEvent *pKeyEvent);

	/** Select all items
	 */
	void selectAllElements();

	/**
	 */
	void handleUpdateButtonClicked();

	/**
	 */
	void handleReplaceButtonClicked();

signals:
	/** Signal called after receiving a publication from the collector server
	 *  in order to replace the monitor element list on top of the current
	 */
	void replaceRequested(const DQMMonitorElementPublication &);

	/** Signal called after receiving a publication from the collector server
	 *  in order to append it to the current monitor element list
	 */
	void appendRequested(const DQMMonitorElementPublication &);

	/** Signal emitted when the server responds to the query search by
	 * sending the monitor element list name.
	 */
	void monitorElementListNameReceived(const DQMMonitorElementInfoList &);

	/** Key pressed event emitted in the tree widget
	 */
	void keyPressEvent(QKeyEvent *);

private:

	DQMMonitoring                *m_pMonitoring;

	QComboBox                    *m_pCollectorNameComboBox;
	QLineEdit                    *m_pModuleNameEdit;
	QLineEdit                    *m_pMonitorElementNameEdit;
	QComboBox                    *m_pMonitorElementTypeComboBox;
	QTreeWidget                  *m_pSearchTreeWidget;
	QGroupBox                    *m_pOptionGroupBox;
	QPushButton                  *m_pReplaceButton;
	QPushButton                  *m_pAppendButton;
	QPushButton                  *m_pCloseButton;

	DQMGuiMonitorElementClient   *m_pMonitorElementClient;
}; 

} 

#endif  //  DQMBROWSERWIDGET_H
