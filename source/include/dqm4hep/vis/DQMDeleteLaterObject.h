  /// \file DQMDeleteLaterObject.h
/*
 *
 * DQMDeleteLaterObject.h header template automatically generated by a class generator
 * Creation date : lun. oct. 12 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMDELETELATEROBJECT_H
#define DQMDELETELATEROBJECT_H

#include <QObject>

namespace dqm4hep
{

/** DQMDeleteLaterObject class
 *
 *  Allows to perform deleteLater() on non-qt object.
 */
template <typename T>
class DQMDeleteLaterObject : public QObject
{
public:
	/** Constructor
	 */
	DQMDeleteLaterObject(T *pPtr);

	/** Destructor
	 */
	~DQMDeleteLaterObject();

	/** Delete the object in the qt event loop
	 */
	static void deleteLaterObject(T *pPtr);

private:

	T      *m_pPtr;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

template <typename T>
inline DQMDeleteLaterObject<T>::DQMDeleteLaterObject(T *pPtr) :
	m_pPtr(pPtr)
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

template <typename T>
inline DQMDeleteLaterObject<T>::~DQMDeleteLaterObject()
{
	delete m_pPtr;
}

//-------------------------------------------------------------------------------------------------

template <typename T>
inline void DQMDeleteLaterObject<T>::deleteLaterObject(T *pPtr)
{
	DQMDeleteLaterObject<T> *pDeleteObject = new DQMDeleteLaterObject<T>(pPtr);
	pDeleteObject->deleteLater();
}

} 

#endif  //  DQMDELETELATEROBJECT_H
