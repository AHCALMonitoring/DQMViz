  /// \file DQMMonitoringController.h
/*
 *
 * DQMMonitoringController.h header template automatically generated by a class generator
 * Creation date : sam. oct. 10 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMMONITORINGCONTROLLER_H
#define DQMMONITORINGCONTROLLER_H

#include <QObject>
#include <QColor>
#include <QMap>
#include <QIcon>

#include "dqm4hep/DQMLogger.h"
#include "dqm4hep/vis/DQMGuiMonitorElement.h"
#include "dqm4hep/DQMMessaging.h"

namespace dqm4hep
{

class DQMMonitoring;
class DQMMonitorElementClient;
class DQMGuiMonitorElementClient;
class DQMCanvasArea;
class DQMCanvas;

/** DQMMonitoringController class
 */ 
class DQMMonitoringController : public QObject, public DQMLogger
{
	Q_OBJECT

	typedef std::map<std::string, DQMGuiMonitorElementClient*> DQMGuiMonitorElementClientMap;

public:
	/** Constructor
	 */
	DQMMonitoringController(DQMMonitoring *pMonitoring);

	/** Destructor
	 */
	virtual ~DQMMonitoringController();

	/**
	 */
	DQMMonitoring *getMonitoring() const;

	/**
	 */
	void log(const std::string &message);

	/** Log in the logger with a log level
	 */
	void log(LogLevel level, const std::string &message);

	/** Create a monitor element client from the collector name.
	 *  Act as a factory method. The client is not registered.
	 *  To get a registered client, use getClient(n) instead
	 */
	virtual DQMGuiMonitorElementClient *createClient(const std::string &collectorName);

	/** Get a registered client. If the client is not registered,
	 *  it is created and added on the fly to the list of registered clients
	 */
	virtual DQMGuiMonitorElementClient *getClient(const std::string &collectorName);

	/**
	 */
	virtual void removeClient(const std::string &collectorName);

	/**
	 */
	void queryUpdate(DQMGuiMonitorElement *pMonitorElement);

	/**
	 */
	void queryUpdate(const DQMGuiMonitorElementList &monitorElementList);

	/**
	 */
	void clear();

public:
	/** Get the color associated to the data quality
	 */
	virtual QColor getColor(DQMQuality quality) const;

	/** Get the icon associated to the data quality
	 */
	virtual QIcon getIcon(DQMQuality quality) const;

public slots:
	/**
	 */
	virtual void openFile();

	/**
	 */
	virtual void saveAs();

	/**
	 */
	virtual void openBrowser();

	/** Open about DQM4HEP pop up dialog
	 */
	virtual void aboutDQM4HEP();

	/** Open the doxygen documentation (if exists) in the default web browser
	 */
	virtual void openDoxygenDoc();

	/** Open user guide (pdf) in the default pdf reader
	 */
	virtual void openUserGuide();

	/** Open the DQM4HEP github page in the default web browser
	 */
	virtual void openGithubPage();

	/** Open the DQM4HEP issues github page in the default web browser
	 */
	virtual void openIssuesPage();

	/**
	 */
	void clearViewAndModel();

	/**
	 */
	void handleMonitorElementPublicationReception(const DQMMonitorElementPublication &);

	/** Send a request to all collectors with all checked elements in the view
	 */
	void sendMonitorElementRequests();

	/**
	 */
	void sendMonitorElementRequest(const std::string &collectorName, const DQMMonitorElementRequest &request);

	/**
	 */
	virtual void openMonitorElementInfo(DQMGuiMonitorElement *pMonitorElement) const;

	/**
	 */
	virtual void openQualityTestResults(DQMGuiMonitorElement *pMonitorElement) const;

	/**
	 */
	virtual void openInROOTWindow(DQMGuiMonitorElement *pMonitorElement) const;

	/**
	 */
	virtual void openFile(const std::string &fileName);

	/**
	 */
	virtual void saveAs(const std::string &fileName) const;

	/**
	 */
	virtual void saveAs(DQMCanvasArea *pCanvasArea);

	/**
	 */
	virtual void saveAs(DQMCanvas *pCanvas);

	/** Exit the monitoring application
	 */
	virtual void quit();

private:

	DQMMonitoring                   *m_pMonitoring;
	DQMGuiMonitorElementClientMap    m_clientMap;
	QMap<LogLevel, QString>          m_logLevelToTextMap;
};

} 

#endif  //  DQMMONITORINGCONTROLLER_H
