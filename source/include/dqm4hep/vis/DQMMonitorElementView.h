  /// \file DQMMonitorElementView.h
/*
 *
 * DQMMonitorElementView.h header template automatically generated by a class generator
 * Creation date : lun. oct. 12 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMMONITORELEMENTVIEW_H
#define DQMMONITORELEMENTVIEW_H

#include <QWidget>
#include <QToolBox>
#include <QTreeWidget>

#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMXmlIO.h"
#include "dqm4hep/vis/DQMGuiMonitorElement.h"

namespace dqm4hep
{

class DQMMonitoring;

/** DQMMonitorElementNavigator class
 */
class DQMMonitorElementNavigator : public QTreeWidget
{
	Q_OBJECT

public:
	/** ItemType enumerator
	 */
	enum ItemType
	{
		DIRECTORY_ITEM = 1,
		MONITOR_ELEMENT_ITEM = 2
	};

	/** Constructor
	 */
	DQMMonitorElementNavigator(const QString &collectorName, DQMMonitoring *pMonitoring, QWidget *pParent = 0);

	/** Destructor
	 */
	~DQMMonitorElementNavigator();

	/** Get the monitoring instance
	 */
	DQMMonitoring *getMonitoring() const;

	/** Get the collector name
	 */
	const QString &getCollectorName() const;

	/** Get the module name list
	 */
	QStringList getModuleNames() const;

	/** Create a directory and return the directory.
	 *  If the directory exists, the function just returns
	 *  the existing directory
	 */
	QTreeWidgetItem *mkdir(const QString &moduleName);

	/** Create a directory and return the directory.
	 *  If the directory exists, the function just returns
	 *  the existing directory
	 */
	QTreeWidgetItem *mkdir(const QString &moduleName, const QString &fullPathDirName);

	/** Remove the directory.
	 *  Return whether the directory was found and deleted
	 */
	bool rmdir(const QString &moduleName);

	/** Remove the directory.
	 *  Return whether the directory was found and deleted
	 */
	bool rmdir(const QString &moduleName, const QString &fullPathDirName);

	/** Whether the directory exists
	 */
	bool dirExists(const QString &moduleName);

	/** Whether the directory exists
	 */
	bool dirExists(const QString &moduleName, const QString &fullPathDirName);

	/** Clear the tree structure
	 */
	void clear();

	/** Create an entry (if doesn't exists) from the monitor element.
	 *  The monitor element itself is not stored
	 */
	void updateMonitorElement(DQMGuiMonitorElement *pMonitorElement);

	/** Create an entry (if doesn't exists) for each of the monitor elements.
	 *  Each of the monitor element itself is not stored
	 */
	void updateMonitorElements(const DQMGuiMonitorElementList &monitorElementList);

	/** Remove the monitor element from the tree widget
	 */
	void removeMonitorElement(DQMGuiMonitorElement *pMonitorElement);

	/** Add a monitor element item and set pTreeItem as its parent item.
	 *
	 *  If the monitor element item already exists in child items of
	 *  pTreeItem, it is not created.
	 *
	 *  Returns the created/existing monitor element item
	 */
	QTreeWidgetItem *addMonitorElement(QTreeWidgetItem *pTreeItem, const QString &name);

	/** Get the full path name of the tree item.
	 *  Can be a monitor element item or a simple directory
	 */
	QString getFullPathName(QTreeWidgetItem *pTreeItem) const;

	/** Get the module name of the tree item
	 */
	QString getModuleName(QTreeWidgetItem *pTreeItem) const;

	/** Whether the tree item is a directory
	 */
	bool isDirectoryItem(QTreeWidgetItem *pTreeItem) const;

	/** Whether the tree item is a monitor element item
	 */
	bool isMonitorElementItem(QTreeWidgetItem *pTreeItem) const;

	/** Get the selected monitor element items
	 */
	QList<QTreeWidgetItem*> getSelectedMonitorElementItems() const;

	/** Get the selected directory items
	 */
	QList<QTreeWidgetItem*> getSelectedDirectoryItems() const;

	/** Get the checked monitor element items
	 */
	QList<QTreeWidgetItem*> getCheckedMonitorElements() const;

	/** Get all monitor element items for a given module
	 */
	QList<QTreeWidgetItem*> getAllMonitorElementItems(const QString &moduleName) const;

public slots:
	/** Check all monitor element items
	 */
	void checkAllMonitorElements();

	/** Uncheck all monitor element items
	 */
	void uncheckAllMonitorElements();

	/** Check selected monitor element items
	 */
	void checkSelectedMonitorElements();

	/** Uncheck selected monitor element items
	 */
	void uncheckSelectedMonitorElements();

private:
	/** Create a directory and set pTreeItem as parent item.
	 *
	 *  If the directory already exists in child items of
	 *  pTreeItem, it is not created.
	 *
	 *  Returns the created/existing directory item
	 */
	QTreeWidgetItem *mkdir(QTreeWidgetItem *pTreeItem, const QString &dirName);

	/**
	 */
	bool dirExists(QTreeWidgetItem *pTreeItem, const QString &name) const;

	/**
	 */
	void clear(QTreeWidgetItem *pTreeItem) const;

	/**
	 */
	void getRecursiveMonitorElements(QTreeWidgetItem *pTreeItem, QList<QTreeWidgetItem*> &monitorElementItems, bool onlyChecked = false) const;

	/**
	 */
	void keyPressEvent(QKeyEvent *pKeyEvent);

	/**
	 */
	void mousePressEvent(QMouseEvent *pMouseEvent);

private slots:
	/**
	 */
	void showContextMenu(const QPoint &point);

	/**
	 */
	void drawSelectedMonitorElements();

	/**
	 */
	void handleItemDoubleClick(QTreeWidgetItem *pTreeWidgetItem, int column);

	/**
	 */
	void handleItemExpanded(QTreeWidgetItem *pTreeWidgetItem);

	/**
	 */
	void handleItemCollapsed(QTreeWidgetItem *pTreeWidgetItem);

	/**
	 */
	void startDrag();

private:

	DQMMonitoring          *m_pMonitoring;
	QString                 m_collectorName;
	QList<QTreeWidgetItem*> m_dragItemList;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

/** DQMMonitorElementView class
 */ 
class DQMMonitorElementView : public QWidget, public DQMXmlIO
{
	Q_OBJECT

public:
	/** Constructor
	 */
	DQMMonitorElementView(DQMMonitoring *pMonitoring);

	/** Destructor
	 */
	virtual ~DQMMonitorElementView();

	/** Get the monitoring instance
	 */
	DQMMonitoring *getMonitoring() const;

	/**
	 */
	QStringList getCollectorNames() const;

	/**
	 */
	QList<QTreeWidgetItem*> getCheckedMonitorElements() const;

	/**
	 */
	QList<QTreeWidgetItem*> getCheckedMonitorElements(const std::string &collectorName) const;

	/** Export settings to xml element
	 */
	TiXmlElement *toXml() const;

	/** Import settings from xml element
	 */
	void fromXml(TiXmlElement *const pXmlElement);

public slots:
	/** Add a monitor element to the view
	 */
	void addMonitorElement(DQMGuiMonitorElement *pMonitorElement);

	/** Remove a monitor element from the view
	 */
	void removeMonitorElement(DQMGuiMonitorElement *pGuiMonitorElement);

	/** Update the monitor element
	 */
	void updateMonitorElement(DQMGuiMonitorElement *pMonitorElement);

	/**
	 */
	void replaceMonitorElement(DQMGuiMonitorElement *pOldMonitorElement, DQMGuiMonitorElement *pNewMonitorElement);

	/**
	 */
	void clear();

	/**
	 */
	void clear(const std::string &collectorName);

private slots:
	/**
	 */
	void handleMonitorElementUpdate();

	/**
	 */
	void handleMonitorElementDeletion();

private:

	DQMMonitoring           *m_pMonitoring;
	QToolBox                *m_pToolBox;
}; 

} 

#endif  //  DQMMONITORELEMENTVIEW_H
