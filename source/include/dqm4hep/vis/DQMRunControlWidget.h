/// \file DQMRunControlWidget.h
/*
 *
 * DQMRunControlWidget.h header template automatically generated by a class generator
 * Creation date : jeu. mai 7 2015
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMRUNCONTROLWIDGET_H
#define DQMRUNCONTROLWIDGET_H

// -- dqm4hep headers
#include "dqm4hep/DQM4HEP.h"
#include "dqm4hep/DQMLogger.h"
#include "dqm4hep/DQMRunControlService.h"

// -- qt headers
#include <QGroupBox>
#include <QPushButton>
#include <QSpinBox>
#include <QLineEdit>
#include <QTextEdit>
#include <QTableWidget>
#include <QHeaderView>
#include <QLabel>

namespace dqm4hep
{

/** DQMRunControlWidget class.
 *  A QGroupBox widget providing the run control commands for dqm
 */
class DQMRunControlWidget : public QWidget
{
    Q_OBJECT

public:
    /** Constructor with logger and parent widget (optional)
         */
    DQMRunControlWidget(DQMLogger *pLogger = 0, QWidget *pParent = 0);

    /** Destructor
         */
    ~DQMRunControlWidget();

    /** Set the run control name.
         *  Can be set only if the service is not already running
         */
    void setRunControlName(const QString &name);

    /** Get the run control name
         */
    QString getRunControlName() const;

    /** Get the detector name
         */
    QString getDetectorName() const;

    /** Get the run description as displayed on the widget
         */
    QString getDescription() const;

    /** Get the start time of the current run in h:m:s string format.
         *
         *  Returns an empty string if not running
         */
    QString getStartTime() const;

    /** Get the end time of the last run in h:m:s string format.
         *
         *  Returns an empty string if running
         */
    QString getEndTime() const;

    /** Get the run control status (running or stopped) as a string
         */
    QString getStatus() const;

    /** Get the run number as shown on the spin box
         */
    int getRunNumber() const;

    /** Start the run control service.
         *
         *  See startNewRun() to start a run.
         */
    void start();

    /** Stop the run control service.
         *
         *  Stop the current run if running.
         *  See endCurrentRun()
         */
    void stop();

public slots:
    /** Start a new run.
         *
         *  The run number is taken from the spin box
         */
    void startNewRun();

    /** End the current run.
         */
    void endCurrentRun();

    /** Add row to Table Widget
         */
    void addNewRow();

    /** Add row to Table Widget
         */
    void deleteRow();

    /**
         */
    void importFile();

    /**
         */
    void importFile(const std::string &fileName);

    /**
     */
    void exportFile();

    /**
     */
    void exportFile(const std::string &fileName);

private:
    QGroupBox                        *m_pRunActionGroupBox;
    QLineEdit                        *m_pDetectorNameEdit;
    QTextEdit                        *m_pRunDescriptionTextEdit;
    QTableWidget                     *m_pRunParametersTableWidget;
    QPushButton                      *m_pAddParameterButton;
    QPushButton                      *m_pDeleteParameterButton;
    QPushButton                      *m_pStartOfRunButton;
    QPushButton                      *m_pEndOfRunButton;
    QSpinBox                         *m_pRunNumberSpinBox;

    QLabel                           *m_pRunNumberLabel;
    QLabel                           *m_pRunStateLabel;
    QLabel                           *m_pRunStartTimeLabel;
    QLabel                           *m_pRunEndTimeLabel;

    DQMRunControlService             *m_pRunControlService;

    DQMLogger                        *m_pLogger;
};

}

#endif  //  DQMRUNCONTROLWIDGET_H
