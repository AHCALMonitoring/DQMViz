  /// \file DQMGuiMonitorElementClient.h
/*
 *
 * DQMGuiMonitorElementClient.h header template automatically generated by a class generator
 * Creation date : mer. oct. 14 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#ifndef DQMGUIMONITORELEMENTCLIENT_H
#define DQMGUIMONITORELEMENTCLIENT_H

#include "dqm4hep/DQMMonitorElementClient.h"

#include <QObject>

namespace dqm4hep
{

/** DQMGuiMonitorElementClient class
 */ 
class DQMGuiMonitorElementClient : public QObject, public DQMMonitorElementClientListener
{
	Q_OBJECT

public:
	/** Constructor
	 */
	DQMGuiMonitorElementClient(const std::string &collectorName);

	/** Destructor
	 */
	virtual ~DQMGuiMonitorElementClient();

	/** Get the monitor element client instance (dqm core class)
	 */
	DQMMonitorElementClient *getMonitorElementClient() const;

signals:
	/** Qt signal emitted when the dim handler receives a collector info structure
	 */
	void collectorInfoReceived(const DQMHostInfo &);

	/** Qt signal emitted when the dim handler receives an info list on monitor elements
	 */
	void monitorElementListNameReceived(const DQMMonitorElementInfoList &);

	/** Qt signal emitted when the dim handler receives a monitor element publication
	 */
	void monitorElementPublicationReceived(const DQMPublication &);

	/** Qt signal emitted when the client is connected
	 */
	void onMonitorElementClientConnect();

	/** Qt signal emitted when the client is disconnected
	 */
	void onMonitorElementClientDisconnect();

	/** Qt signal emitted when the collector server is started
	 */
	void onServerStartup();

	/** Qt signal emitted when the collector server is shut down
	 */
	void onServerShutdown();

private:
	void onMonitorElementClientConnect(DQMMonitorElementClient */*pClient*/);
	void onMonitorElementClientDisconnect(DQMMonitorElementClient */*pClient*/);
	void onServerStartup(DQMMonitorElementClient */*pClient*/);
	void onServerShutdown(DQMMonitorElementClient */*pClient*/);
	void availableMonitorElementListReceived(DQMMonitorElementClient */*pClient*/, const DQMMonitorElementInfoList &/*infoList*/);
	void monitorElementCollectorInfoReceived(DQMMonitorElementClient */*pClient*/, const DQMHostInfo &/*collectorInfo*/);
	void monitorElementsReceived(DQMMonitorElementClient */*pClient*/, DQMPublication &/*publication*/);

private:
	DQMMonitorElementClient           *m_pMonitorElementClient;
	DQMPublication                     m_publication;
}; 

} 

#endif  //  DQMGUIMONITORELEMENTCLIENT_H
