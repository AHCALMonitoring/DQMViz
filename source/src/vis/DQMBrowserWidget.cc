/*
 *
 * DQMBrowserWidget.cc source template automatically generated by a class generator
 * Creation date : ven. mai 8 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/vis/DQMBrowserWidget.h"
#include "dqm4hep/vis/DQMMonitoring.h"
#include "dqm4hep/vis/DQMMonitoringController.h"
#include "dqm4hep/DQMNetworkTool.h"
#include "DQMVizConfig.h"

// -- qt headers
#include <QComboBox>
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QLineEdit>
#include <QGroupBox>
#include <QFormLayout>
#include <QTreeWidget>
#include <QPushButton>
#include <QMessageBox>
#include <QLabel>
#include <QMutexLocker>
#include <QListWidget>
#include <QHeaderView>

// -- dim headers
#include "dic.hxx"

namespace dqm4hep
{

DQMBrowserWidget::DQMBrowserWidget(DQMMonitoring *pMonitoring) :
		QWidget(0),
		m_pMonitoring(pMonitoring),
		m_pMonitorElementClient(NULL)
{
	setLayout(new QVBoxLayout());

	char *pDnsNode = getenv("DIM_DNS_NODE");
	QString dimDnsNode = pDnsNode == NULL ? "UNKNOWN" : pDnsNode;

	// monitor element collector
	QGroupBox *pCollectorGroupBox = new QGroupBox("Monitor element collectors (DIM_DNS_NODE = " + dimDnsNode + ")");
	QFormLayout *pCollectorLayout = new QFormLayout();
	pCollectorGroupBox->setLayout(pCollectorLayout);
	layout()->addWidget(pCollectorGroupBox);

	QWidget *pCollectorNameWidget = new QWidget();
	QHBoxLayout *pCollectorNameLayout = new QHBoxLayout();
	pCollectorNameWidget->setLayout(pCollectorNameLayout);
	pCollectorLayout->addRow("Monitor element collector : ", pCollectorNameWidget);
	m_pCollectorNameComboBox = new QComboBox();
	pCollectorNameLayout->addWidget(m_pCollectorNameComboBox);
	QPushButton *pUpdateCollectorListButton = new QPushButton("Update list");
	pUpdateCollectorListButton->setMaximumWidth(150);
	pCollectorNameLayout->addWidget(pUpdateCollectorListButton);

	// search options with form and buttons
	m_pOptionGroupBox = new QGroupBox("Search option", this);
	QFormLayout *pOptionFormLayout = new QFormLayout();
	m_pOptionGroupBox->setLayout(pOptionFormLayout);
	m_pModuleNameEdit = new QLineEdit();
	pOptionFormLayout->addRow("Module name", m_pModuleNameEdit);
	m_pMonitorElementNameEdit = new QLineEdit();
	pOptionFormLayout->addRow("Monitor element name", m_pMonitorElementNameEdit);
	m_pMonitorElementTypeComboBox = new QComboBox();
	m_pMonitorElementTypeComboBox->addItem("All", NO_ELEMENT_TYPE);
	m_pMonitorElementTypeComboBox->addItem(monitorElementTypeToString(INT_ELEMENT_TYPE).c_str(), INT_ELEMENT_TYPE);
	m_pMonitorElementTypeComboBox->addItem(monitorElementTypeToString(REAL_ELEMENT_TYPE).c_str(), REAL_ELEMENT_TYPE);
	m_pMonitorElementTypeComboBox->addItem(monitorElementTypeToString(SHORT_ELEMENT_TYPE).c_str(), SHORT_ELEMENT_TYPE);
	m_pMonitorElementTypeComboBox->addItem(monitorElementTypeToString(STRING_ELEMENT_TYPE).c_str(), STRING_ELEMENT_TYPE);
	m_pMonitorElementTypeComboBox->addItem(monitorElementTypeToString(INT_HISTOGRAM_1D_ELEMENT_TYPE).c_str(), INT_HISTOGRAM_1D_ELEMENT_TYPE);
	m_pMonitorElementTypeComboBox->addItem(monitorElementTypeToString(REAL_HISTOGRAM_1D_ELEMENT_TYPE).c_str(), REAL_HISTOGRAM_1D_ELEMENT_TYPE);
	m_pMonitorElementTypeComboBox->addItem(monitorElementTypeToString(SHORT_HISTOGRAM_1D_ELEMENT_TYPE).c_str(), SHORT_HISTOGRAM_1D_ELEMENT_TYPE);
	m_pMonitorElementTypeComboBox->addItem(monitorElementTypeToString(CHAR_HISTOGRAM_1D_ELEMENT_TYPE).c_str(), CHAR_HISTOGRAM_1D_ELEMENT_TYPE);
	m_pMonitorElementTypeComboBox->addItem(monitorElementTypeToString(INT_HISTOGRAM_2D_ELEMENT_TYPE).c_str(), INT_HISTOGRAM_2D_ELEMENT_TYPE);
	m_pMonitorElementTypeComboBox->addItem(monitorElementTypeToString(REAL_HISTOGRAM_2D_ELEMENT_TYPE).c_str(), REAL_HISTOGRAM_2D_ELEMENT_TYPE);
	m_pMonitorElementTypeComboBox->addItem(monitorElementTypeToString(CHAR_HISTOGRAM_2D_ELEMENT_TYPE).c_str(), CHAR_HISTOGRAM_2D_ELEMENT_TYPE);
	m_pMonitorElementTypeComboBox->addItem(monitorElementTypeToString(SHORT_HISTOGRAM_2D_ELEMENT_TYPE).c_str(), SHORT_HISTOGRAM_2D_ELEMENT_TYPE);
	m_pMonitorElementTypeComboBox->addItem(monitorElementTypeToString(PROFILE_1D_ELEMENT_TYPE).c_str(), PROFILE_1D_ELEMENT_TYPE);
	m_pMonitorElementTypeComboBox->addItem(monitorElementTypeToString(PROFILE_2D_ELEMENT_TYPE).c_str(), PROFILE_2D_ELEMENT_TYPE);
	pOptionFormLayout->addRow("Monitor element type", m_pMonitorElementTypeComboBox);
	QWidget *pSearchButtonAreaWidget = new QWidget();
	pOptionFormLayout->addRow("", pSearchButtonAreaWidget);
	QHBoxLayout *pSearchAreaLayout = new QHBoxLayout();
	pSearchButtonAreaWidget->setLayout(pSearchAreaLayout);
	QPushButton *pStartSearchButton = new QPushButton("Search");
	pStartSearchButton->setMaximumWidth(150);
	pSearchAreaLayout->addWidget(pStartSearchButton);
	QPushButton *pClearSelectionButton = new QPushButton("Clear");
	pClearSelectionButton->setMaximumWidth(150);
	pSearchAreaLayout->addWidget(pClearSelectionButton);
	layout()->addWidget(m_pOptionGroupBox);

	// search result main view
	QGroupBox *pSearchResultGroupBox = new QGroupBox("Search result");
	layout()->addWidget(pSearchResultGroupBox);
	QHBoxLayout *pSearchResultLayout = new QHBoxLayout();
	pSearchResultGroupBox->setLayout(pSearchResultLayout);
	m_pSearchTreeWidget = new QTreeWidget();
	m_pSearchTreeWidget->setHeaderLabels(QStringList() << "Module" << "Directory" << "Name" << "Type");
	pSearchResultLayout->addWidget(m_pSearchTreeWidget);

	// bottom button area
	QWidget *pBottomButtonAreaWidget = new QWidget();
	layout()->addWidget(pBottomButtonAreaWidget);
	QHBoxLayout *pBottomAreaLayout = new QHBoxLayout();
	pBottomButtonAreaWidget->setLayout(pBottomAreaLayout);

	m_pReplaceButton = new QPushButton("Replace");
	m_pReplaceButton->setMaximumWidth(150);
	m_pReplaceButton->setEnabled(false);
	pBottomAreaLayout->addWidget(m_pReplaceButton);

	m_pAppendButton = new QPushButton("Append");
	m_pAppendButton->setMaximumWidth(150);
	m_pAppendButton->setEnabled(false);
	pBottomAreaLayout->addWidget(m_pAppendButton);

	m_pCloseButton = new QPushButton("Close");
	m_pCloseButton->setMaximumWidth(150);
	pBottomAreaLayout->addWidget(m_pCloseButton);

	connect(m_pCloseButton, SIGNAL(clicked()), this, SLOT(close()));
	connect(pUpdateCollectorListButton, SIGNAL(clicked()), this, SLOT(updateCollectorList()));

	connect(m_pCollectorNameComboBox, SIGNAL(currentIndexChanged(int)), this, SLOT(handleCollectorSelection(int)));
	connect(pClearSelectionButton, SIGNAL(clicked()), this, SLOT(clearSearch()));
	connect(pStartSearchButton, SIGNAL(clicked()), this, SLOT(querySearch()));
	connect(m_pSearchTreeWidget, SIGNAL(itemDoubleClicked(QTreeWidgetItem *, int)), this, SLOT(checkItem(QTreeWidgetItem*, int)));
	connect(this, SIGNAL(keyPressEvent(QKeyEvent*)), this, SLOT(handleKeyPressEvent(QKeyEvent*)));
	connect(m_pAppendButton, SIGNAL(clicked()), this, SLOT(handleUpdateButtonClicked()));
	connect(m_pReplaceButton, SIGNAL(clicked()), this, SLOT(handleReplaceButtonClicked()));
	connect(m_pModuleNameEdit, SIGNAL(returnPressed()), this, SLOT(querySearch()));
	connect(m_pMonitorElementNameEdit, SIGNAL(returnPressed()), this, SLOT(querySearch()));

	updateCollectorList();

	resize(700, 700);
}

//-------------------------------------------------------------------------------------------------

DQMBrowserWidget::~DQMBrowserWidget()
{
	if(m_pMonitorElementClient)
		m_pMonitorElementClient->deleteLater();
}

//-------------------------------------------------------------------------------------------------

DQMMonitoring *DQMBrowserWidget::getMonitoring() const
{
	return m_pMonitoring;
}

//-------------------------------------------------------------------------------------------------

QString DQMBrowserWidget::getCollectorName() const
{
	if(m_pCollectorNameComboBox->currentIndex() != 0)
		return m_pCollectorNameComboBox->currentText();

	return QString();
}

//-------------------------------------------------------------------------------------------------

void DQMBrowserWidget::updateCollectorList()
{
	QString collectorName = getCollectorName();

	StringVector collectorList = DQMNetworkTool::getMonitorElementCollectors();
	m_pCollectorNameComboBox->clear();
	m_pCollectorNameComboBox->addItem("-- Collector list --");

	for(StringVector::iterator iter = collectorList.begin() , endIter = collectorList.end() ;
			endIter != iter ; ++iter)
		m_pCollectorNameComboBox->addItem(iter->c_str());

	// retrieve the collector in the new list
	int collectorIndex = m_pCollectorNameComboBox->findText(collectorName);

	if(collectorIndex > 0)
	{
		m_pCollectorNameComboBox->setCurrentIndex(collectorIndex);
	}
	else
	{
		clearSearch();
	}
}

//-------------------------------------------------------------------------------------------------

void DQMBrowserWidget::handleCollectorSelection(int index)
{
	if(index < 0)
		return;

	if(index == 0)
	{
		clearSearch();

		if(m_pMonitorElementClient)
		{
			m_pMonitorElementClient->deleteLater();
			m_pMonitorElementClient = 0;
		}

		m_pReplaceButton->setEnabled(false);
		m_pAppendButton->setEnabled(false);

		return;
	}

	m_pReplaceButton->setEnabled(true);
	m_pAppendButton->setEnabled(true);

	QString newCollectorName = m_pCollectorNameComboBox->itemText(index);

	if(m_pMonitorElementClient)
	{
		bool sameCollectorName =
				newCollectorName.toStdString()
				==
				m_pMonitorElementClient->getMonitorElementClient()->getCollectorName();

		if(!sameCollectorName)
		{
			m_pMonitorElementClient->deleteLater();
			m_pMonitorElementClient = 0;
		}
	}


	if(!m_pMonitorElementClient)
	{
		m_pMonitorElementClient = this->getMonitoring()->getController()->createClient(newCollectorName.toStdString());
		m_pMonitorElementClient->getMonitorElementClient()->connectToService();

		connect(m_pMonitorElementClient, SIGNAL(monitorElementListNameReceived(const DQMMonitorElementInfoList &)),
				this, SLOT(fillModuleNameList(const DQMMonitorElementInfoList &)));

		clearSearch();
		querySearch();
	}
}

//-------------------------------------------------------------------------------------------------

void DQMBrowserWidget::clearSearch()
{
	m_pModuleNameEdit->clear();
	m_pMonitorElementNameEdit->clear();
	m_pMonitorElementTypeComboBox->setCurrentIndex(0);
	m_pSearchTreeWidget->clear();
}

//-------------------------------------------------------------------------------------------------

void DQMBrowserWidget::querySearch()
{
	if(!m_pMonitorElementClient)
		return;

	DQMMonitorElementListNameRequest request;
	request[ DQMKey::MODULE_NAME ] = m_pModuleNameEdit->text().toStdString();
	request[ DQMKey::ME_NAME ] = m_pMonitorElementNameEdit->text().toStdString();
	request[ DQMKey::ME_TYPE ] = monitorElementTypeToString(static_cast<DQMMonitorElementType>(m_pMonitorElementTypeComboBox->currentIndex()));

	m_pMonitorElementClient->getMonitorElementClient()->queryAvailableMonitorElements(request);
}

//-------------------------------------------------------------------------------------------------

void DQMBrowserWidget::fillModuleNameList(const DQMMonitorElementInfoList &nameList)
{
	m_pSearchTreeWidget->clear();

	if(nameList.empty())
		return;

	for(unsigned int i=0 ; i<nameList.size() ; i++)
	{
		QString moduleName = nameList.at(i).find( DQMKey::MODULE_NAME )->second.c_str();
		QString monitorElementFullPath = nameList.at(i).find( DQMKey::ME_PATH )->second.c_str();
		QString monitorElementName = nameList.at(i).find( DQMKey::ME_NAME )->second.c_str();
		QString monitorElementType = nameList.at(i).find( DQMKey::ME_TYPE )->second.c_str();
		QString monitorElementDescription = nameList.at(i).find( DQMKey::ME_DESCRIPTION )->second.c_str();

		if( monitorElementDescription.isEmpty() )
			monitorElementDescription = "No description available";

		QStringList itemColumns;
		itemColumns << moduleName << monitorElementFullPath << monitorElementName << monitorElementType;

		QTreeWidgetItem *pItem = new QTreeWidgetItem(itemColumns);

		pItem->setCheckState(0, Qt::Checked);
		pItem->setToolTip(0, monitorElementDescription);
		pItem->setToolTip(1, monitorElementDescription);
		pItem->setToolTip(2, monitorElementDescription);
		pItem->setToolTip(3, monitorElementDescription);

		m_pSearchTreeWidget->addTopLevelItem(pItem);
	}

	m_pSearchTreeWidget->header()->resizeSections(QHeaderView::Stretch);
}

//-------------------------------------------------------------------------------------------------

void DQMBrowserWidget::checkItem(QTreeWidgetItem *pItem, int)
{
	Qt::CheckState state = pItem->checkState(0);
	pItem->setCheckState(0, state == Qt::Checked ? Qt::Unchecked : Qt::Checked);
}

//-------------------------------------------------------------------------------------------------

void DQMBrowserWidget::handleKeyPressEvent(QKeyEvent *pKeyEvent)
{
	if(pKeyEvent->key() == Qt::Key_Return)
		checkSelectedElements();
	if(pKeyEvent->key() == Qt::Key_A)
		selectAllElements();
}

//-------------------------------------------------------------------------------------------------

void DQMBrowserWidget::checkSelectedElements()
{
	QList<QTreeWidgetItem *> selectedItems = m_pSearchTreeWidget->selectedItems();

	if(selectedItems.isEmpty())
		return;

	Qt::CheckState state = Qt::Checked;

	for(unsigned int i=0 ; i<selectedItems.size() ; i++)
	{
		if(i == 0)
		{
			QTreeWidgetItem *pFirstItem = selectedItems.at(i);

			if(pFirstItem->checkState(0) == Qt::Checked)
				state = Qt::Unchecked;
		}

		QTreeWidgetItem *pItem = selectedItems.at(i);
		pItem->setCheckState(0, state);
	}
}

//-------------------------------------------------------------------------------------------------

void DQMBrowserWidget::selectAllElements()
{
	for(unsigned int i=0 ; i<m_pSearchTreeWidget->topLevelItemCount() ; i++)
		m_pSearchTreeWidget->topLevelItem(i)->setSelected(true);
}

//-------------------------------------------------------------------------------------------------

void DQMBrowserWidget::buildMonitorElementInfoList(DQMMonitorElementInfoList &infoList) const
{
	for(unsigned int i=0 ; i<m_pSearchTreeWidget->topLevelItemCount() ; i++)
	{
		if(Qt::Checked == m_pSearchTreeWidget->topLevelItem(i)->checkState(0))
		{
			DQMMonitorElementInfo info;

			info[ DQMKey::MODULE_NAME ] = m_pSearchTreeWidget->topLevelItem(i)->text(0).toStdString();
			info[ DQMKey::ME_PATH ] = m_pSearchTreeWidget->topLevelItem(i)->text(1).toStdString();
			info[ DQMKey::ME_NAME ] = m_pSearchTreeWidget->topLevelItem(i)->text(2).toStdString();
			info[ DQMKey::ME_TYPE ] = m_pSearchTreeWidget->topLevelItem(i)->text(3).toStdString();
			info[ DQMKey::ME_DESCRIPTION ] = m_pSearchTreeWidget->topLevelItem(i)->toolTip(0).toStdString();

			infoList.push_back(info);
		}
	}
}

//-------------------------------------------------------------------------------------------------

void DQMBrowserWidget::handleUpdateButtonClicked()
{
	DQMMonitorElementInfoList infoList;
	this->buildMonitorElementInfoList(infoList);

	std::string collectorName = this->getCollectorName().toStdString();

	if(infoList.empty() || collectorName.empty())
		return;

	// create the client instance (owned by the controller)
	this->getMonitoring()->getController()->getClient(collectorName);

	// create the list in view
	this->getMonitoring()->getController()->createEmptyMonitorElements(collectorName, infoList);
}

//-------------------------------------------------------------------------------------------------

void DQMBrowserWidget::handleReplaceButtonClicked()
{
	DQMMonitorElementInfoList infoList;
	this->buildMonitorElementInfoList(infoList);

	std::string collectorName = this->getCollectorName().toStdString();

	if(infoList.empty() || collectorName.empty())
		return;

	this->getMonitoring()->getController()->clearViewAndModel();

	// create the client instance (owned by the controller)
	this->getMonitoring()->getController()->getClient(collectorName);

	// create the list in view
	this->getMonitoring()->getController()->createEmptyMonitorElements(collectorName, infoList);
}

} 

