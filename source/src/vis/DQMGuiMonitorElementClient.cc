  /// \file DQMGuiMonitorElementClient.cc
/*
 *
 * DQMGuiMonitorElementClient.cc source template automatically generated by a class generator
 * Creation date : mer. oct. 14 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "dqm4hep/vis/DQMGuiMonitorElementClient.h"

namespace dqm4hep
{

DQMGuiMonitorElementClient::DQMGuiMonitorElementClient(const std::string &collectorName) :
		m_pMonitorElementClient(NULL)
{
	m_pMonitorElementClient = new DQMMonitorElementClient();
	m_pMonitorElementClient->addListener(this);
	m_pMonitorElementClient->setCollectorName(collectorName);
}

//-------------------------------------------------------------------------------------------------

DQMGuiMonitorElementClient::~DQMGuiMonitorElementClient()
{
	delete m_pMonitorElementClient;
}

//-------------------------------------------------------------------------------------------------

DQMMonitorElementClient *DQMGuiMonitorElementClient::getMonitorElementClient() const
{
	return m_pMonitorElementClient;
}

//-------------------------------------------------------------------------------------------------

void DQMGuiMonitorElementClient::monitorElementCollectorInfoReceived(DQMMonitorElementClient */*pClient*/, const DQMCollectorInfo &collectorInfo)
{
	emit collectorInfoReceived(collectorInfo);
}

//-------------------------------------------------------------------------------------------------

void DQMGuiMonitorElementClient::availableMonitorElementListReceived(DQMMonitorElementClient */*pClient*/, const DQMMonitorElementInfoList &infoList)
{
	emit monitorElementListNameReceived(infoList);
}

//-------------------------------------------------------------------------------------------------

void DQMGuiMonitorElementClient::monitorElementsReceived(DQMMonitorElementClient */*pClient*/, DQMMonitorElementPublication &publication)
{
	// get copy of publication and clear the one in argument
	DQMMonitorElementPublication publicationCopy(publication);
	publication.clear();
	emit monitorElementPublicationReceived(publicationCopy);
}

//-------------------------------------------------------------------------------------------------

void DQMGuiMonitorElementClient::onMonitorElementClientConnect(DQMMonitorElementClient */*pClient*/)
{
	emit onMonitorElementClientConnect();
}

//-------------------------------------------------------------------------------------------------

void DQMGuiMonitorElementClient::onMonitorElementClientDisconnect(DQMMonitorElementClient */*pClient*/)
{
	emit onMonitorElementClientDisconnect();
}

//-------------------------------------------------------------------------------------------------

void DQMGuiMonitorElementClient::onServerStartup(DQMMonitorElementClient */*pClient*/)
{
	emit onServerStartup();
}

//-------------------------------------------------------------------------------------------------

void DQMGuiMonitorElementClient::onServerShutdown(DQMMonitorElementClient */*pClient*/)
{
	emit onServerShutdown();
}

} 

