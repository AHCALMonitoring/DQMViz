  /// \file DQMAutomaticQueryWidget.cc
/*
 *
 * DQMAutomaticQueryWidget.cc source template automatically generated by a class generator
 * Creation date : lun. oct. 12 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "dqm4hep/vis/DQMAutomaticQueryWidget.h"

#include <QHBoxLayout>
#include <QLabel>

namespace dqm4hep
{

DQMAutomaticQueryWidget::DQMAutomaticQueryWidget(QWidget *pParent) :
		QWidget(pParent)
{
	setLayout(new QHBoxLayout());

	m_pAutomaticModeGroupBox = new QGroupBox("Automatic query");
	m_pAutomaticModeGroupBox->setLayout(new QHBoxLayout());
	layout()->addWidget(m_pAutomaticModeGroupBox);

	m_pAutomaticModeButton = new QPushButton("Start");
	m_pAutomaticModeGroupBox->layout()->addWidget(m_pAutomaticModeButton);

	QLabel *pUpdatePeriodLabel = new QLabel("Update period (secs) : ");
	m_pAutomaticModeGroupBox->layout()->addWidget(pUpdatePeriodLabel);

	m_pUpdatePeriodSpinBox = new QSpinBox();
	m_pUpdatePeriodSpinBox->setValue(10);
	m_pAutomaticModeGroupBox->layout()->addWidget(m_pUpdatePeriodSpinBox);

	connect(&m_automaticModeTimer, SIGNAL(timeout()), this, SLOT(emitTimeout()));
	connect(m_pUpdatePeriodSpinBox, SIGNAL(valueChanged(int)), this, SLOT(handleValueChanged(int)));
	connect(m_pAutomaticModeButton, SIGNAL(clicked()), this, SLOT(handleButtonClicked()));
}

//-------------------------------------------------------------------------------------------------

DQMAutomaticQueryWidget::~DQMAutomaticQueryWidget()
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

void DQMAutomaticQueryWidget::start()
{
	m_automaticModeTimer.start(this->getTimeout()*1000);
	m_pAutomaticModeButton->setText("Stop");
	emit started();
}

//-------------------------------------------------------------------------------------------------

void DQMAutomaticQueryWidget::stop()
{
	m_automaticModeTimer.stop();
	m_pAutomaticModeButton->setText("Start");
}

//-------------------------------------------------------------------------------------------------

int DQMAutomaticQueryWidget::getTimeout() const
{
	return m_pUpdatePeriodSpinBox->value();
}

//-------------------------------------------------------------------------------------------------

bool DQMAutomaticQueryWidget::isRunning() const
{
	return m_automaticModeTimer.isActive();
}

//-------------------------------------------------------------------------------------------------

TiXmlElement *DQMAutomaticQueryWidget::toXml() const
{
	TiXmlElement *pXmlElement = new TiXmlElement("automaticQuery");

	pXmlElement->SetAttribute("active", this->isRunning());
	pXmlElement->SetAttribute("period", this->getTimeout());

	return pXmlElement;
}

//-------------------------------------------------------------------------------------------------

void DQMAutomaticQueryWidget::fromXml(TiXmlElement *const pXmlElement)
{
	bool active = false;
	int period = 10;

	pXmlElement->QueryValueAttribute("active", &active);
	pXmlElement->QueryIntAttribute("period", &period);

	this->stop();

	m_pUpdatePeriodSpinBox->setValue(period);

	if(active)
		this->start();
}

//-------------------------------------------------------------------------------------------------

void DQMAutomaticQueryWidget::emitTimeout()
{
	emit timeout();
}

//-------------------------------------------------------------------------------------------------

void DQMAutomaticQueryWidget::handleValueChanged(int /*value*/)
{
	// if running restart the timer with the new value
	if(this->isRunning())
		this->start();
}

//-------------------------------------------------------------------------------------------------

void DQMAutomaticQueryWidget::handleButtonClicked()
{
	if(this->isRunning())
		this->stop();
	else
		this->start();
}

} 

