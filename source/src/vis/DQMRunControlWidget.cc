/// \file DQMRunControlWidget.cc
/*
 *
 * DQMRunControlWidget.cc source template automatically generated by a class generator
 * Creation date : jeu. mai 7 2015
 *
 * This file is part of DQM4HEP libraries.
 *
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 *
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/vis/DQMRunControlWidget.h"
#include "dqm4hep/DQMRun.h"
#include "dqm4hep/DQMCoreTool.h"
#include "dqm4hep/DQMXmlHelper.h"
#include "dqm4hep/tinyxml.h"

// -- qt headers
#include <QVBoxLayout>
#include <QFormLayout>
#include <QFileDialog>
#include <QMessageBox>

// -- std headers
#include <fstream>

namespace dqm4hep
{

DQMRunControlWidget::DQMRunControlWidget(DQMLogger *pLogger, QWidget *pParent) :
    QWidget(pParent),
    m_pLogger(pLogger)
{
    // Main layout
    QVBoxLayout *pRunControlLayout = new QVBoxLayout();
    setLayout(pRunControlLayout);

    // Run action group box
    m_pRunActionGroupBox = new QGroupBox("Run info", this);
    QFormLayout *pRunActionLayout = new QFormLayout();
    pRunActionLayout->setFieldGrowthPolicy(QFormLayout::ExpandingFieldsGrow);
    m_pRunActionGroupBox->setLayout(pRunActionLayout);
    pRunControlLayout->addWidget(m_pRunActionGroupBox);

    m_pRunNumberSpinBox = new QSpinBox();
    m_pRunNumberSpinBox->setMinimum(1);
    m_pRunNumberSpinBox->setMaximum(std::numeric_limits<int>::max());
    m_pRunNumberSpinBox->setSizePolicy(QSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding));
    m_pRunNumberSpinBox->setAlignment(Qt::AlignRight);
    pRunActionLayout->addRow("Run number : ", m_pRunNumberSpinBox);

    m_pRunDescriptionTextEdit = new QTextEdit();
    pRunActionLayout->addRow("Run description : ", m_pRunDescriptionTextEdit);

    m_pRunParametersTableWidget = new QTableWidget(0,2);
    m_pRunParametersTableWidget->setSelectionMode(QTableWidget::ExtendedSelection);


    m_pRunParametersTableWidget->setHorizontalHeaderLabels(QStringList() << "Parameter" << "Value");
    QHeaderView* pHeaderView = m_pRunParametersTableWidget->horizontalHeader();
    pHeaderView->setResizeMode(QHeaderView::Stretch);
    pRunActionLayout->addRow("Run Parameters : ", m_pRunParametersTableWidget);

    QWidget *pParameterButtonWidget = new QWidget();
    QHBoxLayout *pParameterButtonLayout = new QHBoxLayout();
    pParameterButtonWidget->setLayout(pParameterButtonLayout);

    pParameterButtonLayout->addSpacerItem(new QSpacerItem(1, 0, QSizePolicy::Expanding, QSizePolicy::Minimum));

    m_pAddParameterButton = new QPushButton("Add Parameter");
    pParameterButtonLayout->addWidget(m_pAddParameterButton);

    connect(m_pAddParameterButton, SIGNAL(clicked()), this, SLOT(addNewRow()));

    m_pDeleteParameterButton = new QPushButton("Delete Parameter");
    pParameterButtonLayout->addWidget(m_pDeleteParameterButton);
    connect(m_pDeleteParameterButton, SIGNAL(clicked()), this, SLOT(deleteRow()));
    pRunActionLayout->addWidget(pParameterButtonWidget);

    m_pDetectorNameEdit = new QLineEdit();
    pRunActionLayout->addRow("Detector name : ", m_pDetectorNameEdit);



    QWidget *pRunActionButtonWidget = new QWidget();
    QHBoxLayout *pRunActionButtonLayout = new QHBoxLayout();
    pRunActionButtonWidget->setLayout(pRunActionButtonLayout);

    QFont buttonFont;
    buttonFont.setWeight(QFont::Bold);
    buttonFont.setPointSize(15);

    m_pStartOfRunButton = new QPushButton("Start run");
    m_pStartOfRunButton->setMinimumHeight(70);
    m_pStartOfRunButton->setFont(buttonFont);
    pRunActionButtonLayout->addWidget(m_pStartOfRunButton);

    m_pEndOfRunButton = new QPushButton("End run");
    pRunActionButtonLayout->addWidget(m_pEndOfRunButton);
    m_pEndOfRunButton->setMinimumHeight(70);
    m_pEndOfRunButton->setFont(buttonFont);
    m_pEndOfRunButton->setEnabled(false);

    pRunControlLayout->addWidget(pRunActionButtonWidget);

    m_pRunControlService = new DQMRunControlService();

    // run status group box
    QGroupBox *pRunStatusGroupBox = new QGroupBox("Run status");
    QGridLayout *pRunStatusLayout = new QGridLayout();
    pRunStatusGroupBox->setLayout(pRunStatusLayout);
    pRunControlLayout->addWidget(pRunStatusGroupBox);

    pRunStatusLayout->addWidget(new QLabel("Run number"), 0, 0, Qt::AlignCenter);
    pRunStatusLayout->addWidget(new QLabel("Run state"), 0, 1, Qt::AlignCenter);
    pRunStatusLayout->addWidget(new QLabel("Started at"), 0, 2, Qt::AlignCenter);
    pRunStatusLayout->addWidget(new QLabel("Ended at"), 0, 3, Qt::AlignCenter);

    m_pRunNumberLabel = new QLabel(QString("<b>NONE</b>"));
    pRunStatusLayout->addWidget(m_pRunNumberLabel, 1, 0, Qt::AlignCenter);
    m_pRunStateLabel = new QLabel(stateToString(m_pRunControlService->getRunState()).c_str());
    pRunStatusLayout->addWidget(m_pRunStateLabel, 1, 1, Qt::AlignCenter);
    m_pRunStartTimeLabel = new QLabel("NONE");
    pRunStatusLayout->addWidget(m_pRunStartTimeLabel, 1, 2, Qt::AlignCenter);
    m_pRunEndTimeLabel = new QLabel("NONE");
    pRunStatusLayout->addWidget(m_pRunEndTimeLabel, 1, 3, Qt::AlignCenter);

    connect(m_pStartOfRunButton, SIGNAL(clicked()), this, SLOT(startNewRun()));
    connect(m_pEndOfRunButton, SIGNAL(clicked()), this, SLOT(endCurrentRun()));
}

//-------------------------------------------------------------------------------------------------

DQMRunControlWidget::~DQMRunControlWidget()
{
    if(m_pRunControlService->isRunning())
        m_pRunControlService->stop();

    delete m_pRunControlService;
}

//-------------------------------------------------------------------------------------------------

void DQMRunControlWidget::start()
{
    if(m_pRunControlService->isRunning())
    {
        try
        {
            if(m_pLogger)
                m_pLogger->log(WARNING, "Stopping run control service");

            THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pRunControlService->stop());
        }
        catch(StatusCodeException &exception)
        {
            if(m_pLogger)
                m_pLogger->log(ERROR, "Couldn't stop run control : " + exception.toString());
            return;
        }
    }

    try
    {
        QString runControlName = getRunControlName();
        THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pRunControlService->setRunControlName(runControlName.toStdString()));

        if(m_pLogger)
        {
            std::stringstream message;
            message << "Starting run control service " << runControlName.toStdString();
            m_pLogger->log(MESSAGE, message.str());
        }

        THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pRunControlService->start());
    }
    catch(StatusCodeException &exception)
    {
        if(m_pLogger)
            m_pLogger->log(ERROR, "Couldn't start run control : " + exception.toString());
        return;
    }
}

//-------------------------------------------------------------------------------------------------

void DQMRunControlWidget::stop()
{
    // if running, do not stop the service !
    if(RUNNING_STATE == m_pRunControlService->getRunState())
    {
        if(m_pLogger)
            m_pLogger->log(ERROR, "Couldn't stop run control ! Please stop the current run before !");

        return;
    }

    if(m_pRunControlService->isRunning())
    {
        try
        {
            if(m_pLogger)
                m_pLogger->log(MESSAGE, "Stopping run control ");

            THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pRunControlService->stop());
        }
        catch(StatusCodeException &exception)
        {
            if(m_pLogger)
                m_pLogger->log(ERROR, "Couldn't stop run control service : " + exception.toString());
            return;
        }
    }
}

//-------------------------------------------------------------------------------------------------

QString DQMRunControlWidget::getRunControlName() const
{
    return QString(m_pRunControlService->getRunControlName().c_str());
}

//-------------------------------------------------------------------------------------------------

void DQMRunControlWidget::setRunControlName(const QString &name)
{
    m_pRunControlService->setRunControlName(name.toStdString());
}

//-------------------------------------------------------------------------------------------------

QString DQMRunControlWidget::getDetectorName() const
{
    return m_pDetectorNameEdit->text();
}

//-------------------------------------------------------------------------------------------------

QString DQMRunControlWidget::getDescription() const
{
    return m_pRunDescriptionTextEdit->toPlainText();
}

//-------------------------------------------------------------------------------------------------

QString DQMRunControlWidget::getStartTime() const
{
    return QString("");
}

//-------------------------------------------------------------------------------------------------

QString DQMRunControlWidget::getEndTime() const
{
    return QString("");
}

//-------------------------------------------------------------------------------------------------

QString DQMRunControlWidget::getStatus() const
{
    return QString(stateToString(m_pRunControlService->getRunState()).c_str());
}

//-------------------------------------------------------------------------------------------------

int DQMRunControlWidget::getRunNumber() const
{
    return m_pRunNumberSpinBox->value();
}

//-------------------------------------------------------------------------------------------------

void DQMRunControlWidget::startNewRun()
{
    if(RUNNING_STATE == m_pRunControlService->getRunState())
    {
        try
        {
            if(m_pLogger)
                m_pLogger->log(WARNING, "Stopping current run");

            THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pRunControlService->endCurrentRun());
        }
        catch(StatusCodeException &exception)
        {
            if(m_pLogger)
                m_pLogger->log(ERROR, "Couldn't end current run : " + exception.toString());
            return;
        }
    }

    try
    {
        int runNumber = m_pRunNumberSpinBox->value();

        if(m_pLogger)
        {
            std::stringstream message;
            message << "Starting new run no " << runNumber;
            m_pLogger->log(MESSAGE, message.str());
        }

        DQMRun *pRun = new DQMRun(runNumber, getDescription().toStdString(), getDetectorName().toStdString());

        for(unsigned int i=0 ; i<m_pRunParametersTableWidget->rowCount() ; i++)
        {
            QTableWidgetItem *pKeyItem = m_pRunParametersTableWidget->item(i, 0);
            QTableWidgetItem *pValueItem = m_pRunParametersTableWidget->item(i, 1);

            if(!pKeyItem || !pValueItem)
                continue;

            pRun->setParameter(pKeyItem->text().toStdString(), pValueItem->text().toStdString());
        }

        THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pRunControlService->startNewRun(pRun));

        time_t startTime = m_pRunControlService->getCurrentRun()->getStartTime();
        std::string startTimeStdStr;
        DQMCoreTool::timeToHMS(startTime, startTimeStdStr);

        m_pRunNumberLabel->setText(QString("<b>%1</b>").arg(runNumber));
        m_pRunStateLabel->setText(stateToString(m_pRunControlService->getRunState()).c_str());
        m_pRunStartTimeLabel->setText(startTimeStdStr.c_str());
        m_pRunEndTimeLabel->setText("NONE");
    }
    catch(StatusCodeException &exception)
    {
        if(m_pLogger)
            m_pLogger->log(ERROR, "Couldn't start new run : " + exception.toString());
        return;
    }

    m_pStartOfRunButton->setEnabled(false);
    m_pEndOfRunButton->setEnabled(true);
}

//-------------------------------------------------------------------------------------------------

void DQMRunControlWidget::endCurrentRun()
{
    if(m_pRunControlService->isRunning())
    {
        try
        {
            if(m_pLogger)
                m_pLogger->log(MESSAGE, "Stopping current run");

            THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, m_pRunControlService->endCurrentRun());

            time_t endTime = time(NULL);
            std::string startTimeStdStr;
            DQMCoreTool::timeToHMS(endTime, startTimeStdStr);

            m_pRunStateLabel->setText(stateToString(m_pRunControlService->getRunState()).c_str());
            m_pRunEndTimeLabel->setText(startTimeStdStr.c_str());
        }
        catch(StatusCodeException &exception)
        {
            if(m_pLogger)
                m_pLogger->log(ERROR, "Couldn't end current run : " + exception.toString());
            return;
        }
    }
    else
        return;

    m_pStartOfRunButton->setEnabled(true);
    m_pEndOfRunButton->setEnabled(false);
}

//-------------------------------------------------------------------------------------------------

void DQMRunControlWidget::addNewRow()
{
    m_pRunParametersTableWidget->insertRow(m_pRunParametersTableWidget->rowCount());
}
//-------------------------------------------------------------------------------------------------

void DQMRunControlWidget::deleteRow()
{
    QList<QTableWidgetSelectionRange> selectedRanges = m_pRunParametersTableWidget->selectedRanges();
    for (int i = 0; i< selectedRanges.size(); i++ )
    {
        int topRow = selectedRanges.at(i).topRow();
        int botRow = selectedRanges.at(i).bottomRow();
        int inc = topRow;
        while(inc <= botRow)
        {
            m_pRunParametersTableWidget->removeRow(topRow);
            inc++;
        }
    }
    m_pRunParametersTableWidget->setCurrentCell(-1,-1);
}

//-------------------------------------------------------------------------------------------------

void DQMRunControlWidget::importFile()
{
    QString fileName = QFileDialog::getOpenFileName(this, "Import", "", "Xml (*.xml)");
    this->importFile(fileName.toStdString());
}

//-------------------------------------------------------------------------------------------------

void DQMRunControlWidget::importFile(const std::string &fileName)
{
    TiXmlDocument xmlDocument(fileName);

    if (!xmlDocument.LoadFile())
    {
        QMessageBox::warning(this, "Warning", "Invalid xml file");
        return;
    }

    const TiXmlHandle xmlDocumentHandle(&xmlDocument);
    const TiXmlHandle xmlHandle = TiXmlHandle(xmlDocumentHandle.FirstChildElement().Element());

    TiXmlElement *const pRunInfoElement = xmlHandle.FirstChildElement("runinfo").Element();

    if(!pRunInfoElement)
    {
        QMessageBox::warning(this, "Warning", "Invalid xml file : Couldn't find <runinfo> element !");
        return;
    }

    TiXmlHandle runInfoHandle(pRunInfoElement);

    int runNumber = 0;
    std::string detectorName;
    std::string description;

    m_pRunParametersTableWidget->clearContents();
    while (m_pRunParametersTableWidget->rowCount() > 0)
        m_pRunParametersTableWidget->removeRow(0);

    try
    {
        TiXmlElement *const pRunNumberElement = runInfoHandle.FirstChildElement("runnumber").Element();
        TiXmlElement *const pDetectorElement = runInfoHandle.FirstChildElement("detector").Element();
        TiXmlElement *const pDescriptionElement = runInfoHandle.FirstChildElement("description").Element();
        TiXmlElement *const pParametersElement = runInfoHandle.FirstChildElement("parameters").Element();

        if(pRunNumberElement)
        {
        	THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::getAttribute(pRunNumberElement, "value", runNumber));
        }

        if(pDetectorElement)
        {
        	THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::getAttribute(pDetectorElement, "name", detectorName));
        }

        if(pDescriptionElement)
        {
        	THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::getAttribute(pDescriptionElement, "value", description));
        }

        if(pParametersElement)
        {
        	TiXmlHandle parametersHandle(pParametersElement);

            for (TiXmlElement *pXmlElement = parametersHandle.FirstChild("parameter").Element(); NULL != pXmlElement;
                pXmlElement = pXmlElement->NextSiblingElement("parameter"))
            {
            	std::string name;
            	std::string value;

            	THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::getAttribute(pXmlElement, "name", name));
            	THROW_RESULT_IF(STATUS_CODE_SUCCESS, !=, DQMXmlHelper::getAttribute(pXmlElement, "value", value));

                int row = m_pRunParametersTableWidget->rowCount();

                m_pRunParametersTableWidget->insertRow(row);
                m_pRunParametersTableWidget->setItem(row, 0, new QTableWidgetItem(name.c_str()));
                m_pRunParametersTableWidget->setItem(row, 1, new QTableWidgetItem(value.c_str()));
            }
        }
    }
	catch(const StatusCodeException &exception)
	{
        QMessageBox::warning(this, "Warning", ("Invalid xml file : Couldn't parse it : " + exception.toString()).c_str());
        return;
	}

    m_pRunNumberSpinBox->setValue(runNumber);
    m_pRunDescriptionTextEdit->clear();
    m_pRunDescriptionTextEdit->setText(description.c_str());
    m_pDetectorNameEdit->setText(detectorName.c_str());
}

//-------------------------------------------------------------------------------------------------

void DQMRunControlWidget::exportFile()
{
    QString fileName = QFileDialog::getSaveFileName(this, "Export", "", "XML (*.xml)");
    exportFile(fileName.toStdString());
}

//-------------------------------------------------------------------------------------------------

void DQMRunControlWidget::exportFile(const std::string &fileName)
{
	TiXmlDocument document;

	TiXmlDeclaration *pDeclaration = new TiXmlDeclaration( "1.0", "", "" );
	document.LinkEndChild(pDeclaration);

	TiXmlElement *pRootElement = new TiXmlElement("dqm4hep");
	document.LinkEndChild(pRootElement);

	TiXmlElement *pRunInfoElement = new TiXmlElement("runinfo");
	pRootElement->LinkEndChild(pRunInfoElement);

	TiXmlElement *pRunNumberElement = new TiXmlElement("runnumber");
	pRunNumberElement->SetAttribute("value", static_cast<int>(m_pRunNumberSpinBox->value()));
	pRunInfoElement->LinkEndChild(pRunNumberElement);

	TiXmlElement *pDetectorElement = new TiXmlElement("detector");
	pDetectorElement->SetAttribute("name", m_pDetectorNameEdit->text().toStdString());
	pRunInfoElement->LinkEndChild(pDetectorElement);

	TiXmlElement *pDescriptionElement = new TiXmlElement("description");
	pDescriptionElement->SetAttribute("value", m_pRunDescriptionTextEdit->toPlainText().toStdString());
	pRunInfoElement->LinkEndChild(pDescriptionElement);


    if(m_pRunParametersTableWidget->rowCount() > 0)
    {
    	TiXmlElement *pParametersElement = new TiXmlElement("parameters");
    	pRunInfoElement->LinkEndChild(pParametersElement);

        for(unsigned int i=0 ; i<m_pRunParametersTableWidget->rowCount() ; i++)
        {
            QTableWidgetItem *pKeyItem = m_pRunParametersTableWidget->item(i, 0);
            QTableWidgetItem *pValueItem = m_pRunParametersTableWidget->item(i, 1);

            if(!pKeyItem || !pValueItem)
                continue;

        	TiXmlElement *pParameterElement = new TiXmlElement("parameter");
        	pParameterElement->SetAttribute("name", pKeyItem->text().toStdString());
        	pParameterElement->SetAttribute("value", pValueItem->text().toStdString());
        	pParametersElement->LinkEndChild(pParameterElement);
        }
    }

	document.SaveFile(fileName);
}

}

