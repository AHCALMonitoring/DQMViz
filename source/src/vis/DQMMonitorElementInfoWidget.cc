  /// \file DQMMonitorElementInfoWidget.cc
/*
 *
 * DQMMonitorElementInfoWidget.cc source template automatically generated by a class generator
 * Creation date : mar. aoï¿½t 11 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */

// -- dqm4hep headers
#include "dqm4hep/vis/DQMMonitorElementInfoWidget.h"

namespace dqm4hep
{

DQMMonitorElementInfoWidget::DQMMonitorElementInfoWidget(DQMGuiMonitorElement *pGuiMonitorElement, QWidget *pParentWidget) :
		QWidget(pParentWidget),
		m_pGuiMonitorElement(pGuiMonitorElement)
{
	buildWidget();
	fillInfos(pGuiMonitorElement);
}

//-------------------------------------------------------------------------------------------------

DQMMonitorElementInfoWidget::DQMMonitorElementInfoWidget(QWidget *pParentWidget) :
		QWidget(pParentWidget),
		m_pGuiMonitorElement(0)
{
	buildWidget();
}

//-------------------------------------------------------------------------------------------------

DQMMonitorElementInfoWidget::~DQMMonitorElementInfoWidget() 
{
	/* nop */
}

//-------------------------------------------------------------------------------------------------

void DQMMonitorElementInfoWidget::showTab(Tab tab)
{
	m_pTabWidget->setCurrentIndex(tab);
}

//-------------------------------------------------------------------------------------------------

void DQMMonitorElementInfoWidget::buildWidget()
{
	QVBoxLayout *pMainLayout = new QVBoxLayout();
	setLayout(pMainLayout);

	m_pUpdateBox = new QCheckBox("Update info on monitor element update");
	m_pUpdateBox->setCheckState(Qt::Unchecked);

	pMainLayout->addWidget(m_pUpdateBox);

	m_pTabWidget = new QTabWidget();
	pMainLayout->addWidget(m_pTabWidget);

	// description tab
	QWidget *pDescriptionTab = new QWidget();
	QFormLayout *pDescriptionLayout = new QFormLayout();
	pDescriptionTab->setLayout(pDescriptionLayout);

	m_pMonitorElementNameLabel = new QLabel();
	pDescriptionLayout->addRow("Name : ", m_pMonitorElementNameLabel);

	m_pMonitorElementTitleLabel = new QLabel();
	pDescriptionLayout->addRow("Title : ", m_pMonitorElementTitleLabel);

	m_pMonitorElementTypeLabel = new QLabel();
	pDescriptionLayout->addRow("Type : ", m_pMonitorElementTypeLabel);

	m_pMonitorElementResetPolicyLabel = new QLabel();
	pDescriptionLayout->addRow("Reset policy : ", m_pMonitorElementResetPolicyLabel);

	m_pMonitorElementDescriptionTextEdit = new QTextEdit();
	m_pMonitorElementDescriptionTextEdit->setReadOnly(true);
	pDescriptionLayout->addRow("Description : ", m_pMonitorElementDescriptionTextEdit);

	m_pMonitorElementDrawOptionLabel = new QLabel();
	pDescriptionLayout->addRow("Draw option : ", m_pMonitorElementDrawOptionLabel);

	m_pMonitorElementRunNumberLabel = new QLabel();
	pDescriptionLayout->addRow("Run number : ", m_pMonitorElementRunNumberLabel);

	m_pMonitorElementFullPathLabel = new QLabel();
	pDescriptionLayout->addRow("Full path : ", m_pMonitorElementFullPathLabel);

	m_pTabWidget->addTab(pDescriptionTab, "Description");

	// quality test tab
	QWidget *pQualityTestTab = new QWidget();

	QVBoxLayout *pQualityTestLayout = new QVBoxLayout();
	pQualityTestTab->setLayout(pQualityTestLayout);

	// global q test results
	QGroupBox *pGlobalQTestGroupBox = new QGroupBox("Global");
	QFormLayout *pGlobalQTestLayout = new QFormLayout();
	pGlobalQTestGroupBox->setLayout(pGlobalQTestLayout);

	// fill the global q test area
	m_pNQTestsLabel = new QLabel();
	pGlobalQTestLayout->addRow("Number of quality tests : ", m_pNQTestsLabel);

	m_pNSuccessQTestsLabel = new QLabel();
	m_pNSuccessQTestsLabel->setStyleSheet("QLabel { color: green; }");
	pGlobalQTestLayout->addRow("Number of successes : ", m_pNSuccessQTestsLabel);

	m_pNFailQTestsLabel = new QLabel();
	m_pNFailQTestsLabel->setStyleSheet("QLabel { color: red; }");
	pGlobalQTestLayout->addRow("Number of fails : ", m_pNFailQTestsLabel);

	m_pMeanQualityQTestsLabel = new QLabel();
	pGlobalQTestLayout->addRow("Mean quality : ", m_pMeanQualityQTestsLabel);

	pQualityTestLayout->addWidget(pGlobalQTestGroupBox);

	// detailed view of quality tests
	QGroupBox *pDetailQTestGroupBox = new QGroupBox("Detail");
	QFormLayout *pDetailQTestLayout = new QFormLayout();
	pDetailQTestGroupBox->setLayout(pDetailQTestLayout);

	m_pQTestsComboBox = new QComboBox();
	pDetailQTestLayout->addRow("Quality test : ", m_pQTestsComboBox);

	m_pQualityTestTypeLabel = new QLabel();
	pDetailQTestLayout->addRow("Type : ", m_pQualityTestTypeLabel);

	m_pQualityTestMessageEdit = new QTextEdit();
	m_pQualityTestMessageEdit->setReadOnly(true);
	pDetailQTestLayout->addRow("Message : ", m_pQualityTestMessageEdit);

	m_pQualityTestQualityLabel = new QLabel();
	pDetailQTestLayout->addRow("Quality : ", m_pQualityTestQualityLabel);

	m_pQualityTestSuccessLabel = new QLabel();
	pDetailQTestLayout->addRow("Success : ", m_pQualityTestSuccessLabel);

	pQualityTestLayout->addWidget(pDetailQTestGroupBox);

	m_pTabWidget->addTab(pQualityTestTab, "Quality tests");

	connect(m_pQTestsComboBox, SIGNAL(currentIndexChanged(int)), this, SLOT(loadQualityTestResult(int)));
	connect(m_pUpdateBox, SIGNAL(stateChanged(int)), this, SLOT(handleUpdateCheckStateChanged(int)));
}

//-------------------------------------------------------------------------------------------------

void DQMMonitorElementInfoWidget::fillInfos()
{
	fillInfos(m_pGuiMonitorElement);
}

//-------------------------------------------------------------------------------------------------

void DQMMonitorElementInfoWidget::fillInfos(DQMGuiMonitorElement *pGuiMonitorElement)
{
	if(NULL == pGuiMonitorElement)
		return;

	DQMMonitorElement *pMonitorElement = pGuiMonitorElement->getMonitorElement();

	if(NULL == pMonitorElement)
		return;

	//
	// Global infos
	//
	// name
	m_pMonitorElementNameLabel->setText(QString(pMonitorElement->getName().c_str()));

	//title
	m_pMonitorElementTitleLabel->setText(QString(pMonitorElement->getTitle().c_str()));

	// type
	m_pMonitorElementTypeLabel->setText(QString(monitorElementTypeToString(pMonitorElement->getType()).c_str()));

	// reset policy
	m_pMonitorElementResetPolicyLabel->setText(QString(resetPolicyToString(pMonitorElement->getResetPolicy()).c_str()));

	// description
	m_pMonitorElementDescriptionTextEdit->clear();
	m_pMonitorElementDescriptionTextEdit->append(QString(pMonitorElement->getDescription().c_str()));

	// draw option
	m_pMonitorElementDrawOptionLabel->setText(QString(pMonitorElement->getDrawOption().c_str()));

	// run number
	m_pMonitorElementRunNumberLabel->setText(QString::number(pMonitorElement->getRunNumber()));

	// full path
	m_pMonitorElementFullPathLabel->setText(QString(pMonitorElement->getPath().getPath().c_str()));

	//
	// Q tests
	//
	m_qualityTestResultMap = pMonitorElement->getQualityTestResults();
	m_pQTestsComboBox->clear();

	unsigned int nSuccess = 0;
	unsigned int nFail = 0;
	float meanQuality = 0.f;

	for(std::map<std::string, DQMQualityTestResult>::const_iterator iter = m_qualityTestResultMap.begin(),
			endIter = m_qualityTestResultMap.end() ; endIter != iter ; ++iter)
	{
		m_pQTestsComboBox->addItem(QString(iter->first.c_str()));

		if(iter->second.m_isSuccessful)
			nSuccess++;
		else
			nFail++;

		meanQuality += static_cast<int>(iter->second.m_quality);
	}

	// n quality tests
	m_pNQTestsLabel->setText(QString::number(m_qualityTestResultMap.size()));

	// n successful q tests
	m_pNSuccessQTestsLabel->setText(QString::number(nSuccess));

	// n failed q tests
	m_pNFailQTestsLabel->setText(QString::number(nFail));

	if(!m_qualityTestResultMap.empty())
	{
		meanQuality /= m_qualityTestResultMap.size();

		// mean quality rate
		m_pMeanQualityQTestsLabel->setText(QString::number(meanQuality) + " / 5");

		loadQualityTestResult(0);
	}
	else
	{
		m_pMeanQualityQTestsLabel->setText("NONE");
	}
}

//-------------------------------------------------------------------------------------------------

void DQMMonitorElementInfoWidget::loadQualityTestResult(int index)
{
	if(index < 0 || m_pQTestsComboBox->count() == 0 || index >= m_pQTestsComboBox->count())
		return;

	// find the quality test result
	std::string qualityTestName = m_pQTestsComboBox->itemText(index).toStdString();
	std::map<std::string, DQMQualityTestResult>::const_iterator findIter = m_qualityTestResultMap.find(qualityTestName);

	if(findIter == m_qualityTestResultMap.end())
		return;

	m_pQualityTestTypeLabel->setText(findIter->second.m_qualityTestType.c_str());
	m_pQualityTestMessageEdit->clear();
	m_pQualityTestMessageEdit->append(findIter->second.m_message.c_str());
	m_pQualityTestQualityLabel->setText(qualityToString(findIter->second.m_quality).c_str());
	m_pQualityTestSuccessLabel->setText(DQM4HEP::typeToString(findIter->second.m_isSuccessful).c_str());
}


void DQMMonitorElementInfoWidget::handleUpdateCheckStateChanged(int state)
{
	if(!m_pGuiMonitorElement)
		return;

	if(state == Qt::Checked)
	{
		connect(m_pGuiMonitorElement, SIGNAL(updated()), this, SLOT(fillInfos()), Qt::UniqueConnection);
	}
	else
	{
		disconnect(m_pGuiMonitorElement, SIGNAL(updated()), this, SLOT(fillInfos()));
	}
}

} 

