  /// \file DQMMonitoringView.cc
/*
 *
 * DQMMonitoringView.cc source template automatically generated by a class generator
 * Creation date : lun. oct. 12 2015
 *
 * This file is part of DQM4HEP libraries.
 * 
 * DQM4HEP is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * based upon these libraries are permitted. Any copy of these libraries
 * must include this copyright notice.
 * 
 * DQM4HEP is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with DQM4HEP.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Remi Ete
 * @copyright CNRS , IPNL
 */


#include "dqm4hep/vis/DQMMonitoringView.h"
#include "dqm4hep/vis/DQMMonitoringController.h"
#include "dqm4hep/vis/DQMMonitoringModel.h"
#include "dqm4hep/vis/DQMMonitoring.h"
#include "dqm4hep/vis/DQMMonitorElementView.h"
#include "dqm4hep/vis/DQMCanvasView.h"
#include "dqm4hep/vis/DQMLoggerWidget.h"
#include "DQMCoreConfig.h"
#include "DQMVizConfig.h"

#include <QMenu>
#include <QVBoxLayout>
#include <QAction>
#include <QMessageBox>
#include <QDir>
#include <QIcon>
#include <QUrl>
#include <QStatusBar>
#include <QDesktopServices>
#include <QApplication>
#include <QSplitter>
#include <QMenuBar>
#include <QFileDialog>
#include <QGroupBox>
#include <QPushButton>
#include <QCloseEvent>

namespace dqm4hep
{


class DQMMonitoringMainWindow : public QMainWindow
{
public:
	DQMMonitoringMainWindow(DQMMonitoring *pMonitoring) :
		m_pMonitoring(pMonitoring)
	{
		/* nop */
	}

	void closeEvent(QCloseEvent *pCloseEvent)
	{
		m_pMonitoring->getController()->quit();
		pCloseEvent->accept();
	}

private:

	DQMMonitoring         *m_pMonitoring;
};

//-------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------

DQMMonitoringView::DQMMonitoringView(DQMMonitoring *pMonitoring) :
	m_pMonitoring(pMonitoring),
	m_pCanvasView(NULL),
	m_pMonitorElementView(NULL),
	m_pMainWindow(NULL),
	m_viewBuilt(false)
{
	m_pMonitoring->setView(this);
}

//-------------------------------------------------------------------------------------------------

DQMMonitoringView::~DQMMonitoringView() 
{
	if(m_pCanvasView)
		delete m_pCanvasView;

	if(m_pMonitorElementView)
		delete m_pMonitorElementView;

	if(m_pMainWindow)
		delete m_pMainWindow;
}

//-------------------------------------------------------------------------------------------------

DQMMonitoring *DQMMonitoringView::getMonitoring() const
{
	return m_pMonitoring;
}

//-------------------------------------------------------------------------------------------------

TiXmlElement *DQMMonitoringView::toXml() const
{
	TiXmlElement *pXmlElement = new TiXmlElement("view");

	TiXmlElement *pMeViewElement = m_pMonitorElementView->toXml();

	if(pMeViewElement)
		pXmlElement->LinkEndChild(pMeViewElement);

	TiXmlElement *pCanvasViewElement = m_pCanvasView->toXml();

	if(pCanvasViewElement)
		pXmlElement->LinkEndChild(pCanvasViewElement);

	return pXmlElement;
}

//-------------------------------------------------------------------------------------------------

void DQMMonitoringView::fromXml(TiXmlElement *const pXmlElement)
{
	if(!pXmlElement)
		return;

	this->clear();

    TiXmlHandle elementHandle(pXmlElement);

    TiXmlElement *pCanvasViewElement = elementHandle.FirstChild("canvasView").Element();

    if(pCanvasViewElement)
    	m_pCanvasView->fromXml(pCanvasViewElement);

    TiXmlElement *pMeViewElement = elementHandle.FirstChild("meView").Element();

    if(pMeViewElement)
    	m_pMonitorElementView->fromXml(pMeViewElement);
}

//-------------------------------------------------------------------------------------------------

DQMCanvasView *DQMMonitoringView::getCanvasView() const
{
	return m_pCanvasView;
}

//-------------------------------------------------------------------------------------------------

DQMMonitorElementView *DQMMonitoringView::getMonitorElementView() const
{
	return m_pMonitorElementView;
}

//-------------------------------------------------------------------------------------------------

QMainWindow *DQMMonitoringView::getMainWindow() const
{
	return m_pMainWindow;
}

//-------------------------------------------------------------------------------------------------

void DQMMonitoringView::buildView()
{
	if(m_viewBuilt)
		return;

	m_pMainWindow = new DQMMonitoringMainWindow(this->getMonitoring());
	m_pMainWindow->setWindowTitle("DQM Monitoring");
	m_pMainWindow->setAnimated(true);

	QString iconDir = QString(DQMViz_DIR) + "/icons";
	m_pMainWindow->setWindowIcon(QIcon(iconDir + "/MON_WIN.png"));

	buildMenus();
	buildCentralView();
	buildStatusBar();

	m_viewBuilt = true;
}

//-------------------------------------------------------------------------------------------------

void DQMMonitoringView::buildMenus()
{
	QMenu *pFileMenu = m_pMainWindow->menuBar()->addMenu("&File");

	pFileMenu->addAction("&Import", this->getMonitoring()->getController(), SLOT(openFile()), QKeySequence(QKeySequence::Open));
	pFileMenu->addAction("&Export", this->getMonitoring()->getController(), SLOT(saveAs()), QKeySequence(QKeySequence::SaveAs));
	pFileMenu->addSeparator();
	pFileMenu->addAction("&Browse", this->getMonitoring()->getController(), SLOT(openBrowser()), QKeySequence(QKeySequence::New));
	pFileMenu->addSeparator();
	pFileMenu->addAction("&Quit", this->getMonitoring()->getController(), SLOT(quit()), QKeySequence(QKeySequence::Quit));

	QMenu *pHelpMenu = m_pMainWindow->menuBar()->addMenu("&Help");

	pHelpMenu->addAction("Doxygen", this->getMonitoring()->getController(), SLOT(openDoxygenDoc()));
	pHelpMenu->addAction("User guide", this->getMonitoring()->getController(), SLOT(openUserGuide()));
	pHelpMenu->addSeparator();
	pHelpMenu->addAction("Contribute", this->getMonitoring()->getController(), SLOT(openGithubPage()));
	pHelpMenu->addAction("Report bugs", this->getMonitoring()->getController(), SLOT(openIssuesPage()));
	pHelpMenu->addSeparator();
	pHelpMenu->addAction("About Qt", qApp, SLOT(aboutQt()));
	pHelpMenu->addAction("About DQM4HEP", this->getMonitoring()->getController(), SLOT(aboutDQM4HEP()));
}

//-------------------------------------------------------------------------------------------------

void DQMMonitoringView::buildCentralView()
{
	// main area
	QSplitter *pMainWidget = new QSplitter(Qt::Horizontal);
	m_pMainWindow->setCentralWidget(pMainWidget);

	QWidget *pLeftViewWidget = new QWidget();
	pLeftViewWidget->setMinimumWidth(300);
	pLeftViewWidget->setLayout(new QVBoxLayout());


    // update buttons
	QWidget *pUpdateButtonAreaWidget = new QWidget();
	pUpdateButtonAreaWidget->setLayout(new QHBoxLayout());

	m_pAutoUpdateButton = new QPushButton("Start update");
	pUpdateButtonAreaWidget->layout()->addWidget(m_pAutoUpdateButton);

	QPushButton *pUpdateButton = new QPushButton("Update");
	pUpdateButtonAreaWidget->layout()->addWidget(pUpdateButton);

	pUpdateButtonAreaWidget->setMaximumHeight(50);
	pLeftViewWidget->layout()->addWidget(pUpdateButtonAreaWidget);


	// monitor element contents view
	QGroupBox *pContentGroupBox = new QGroupBox("Contents");
	pContentGroupBox->setLayout(new QVBoxLayout());
	pLeftViewWidget->layout()->addWidget(pContentGroupBox);

	m_pMonitorElementView = new DQMMonitorElementView(m_pMonitoring);
	m_pMonitorElementView->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);
	pContentGroupBox->layout()->addWidget(m_pMonitorElementView);


	// clear and browse buttons
	QWidget *pClearBrowseButtonAreaWidget = new QWidget();
	pClearBrowseButtonAreaWidget->setLayout(new QHBoxLayout());

	QPushButton *pClearButton = new QPushButton("Clear");
	pClearBrowseButtonAreaWidget->layout()->addWidget(pClearButton);

	QPushButton *pBrowseButton = new QPushButton("Browse");
	pClearBrowseButtonAreaWidget->layout()->addWidget(pBrowseButton);

	pClearBrowseButtonAreaWidget->setMaximumHeight(50);
    pLeftViewWidget->layout()->addWidget(pClearBrowseButtonAreaWidget);

	pMainWidget->addWidget(pLeftViewWidget);


	// canvas area and logger widget
	QWidget *pRightView = new QWidget();
	pRightView->setLayout(new QVBoxLayout());
	pMainWidget->addWidget(pRightView);

	m_pCanvasView = new DQMCanvasView(m_pMonitoring);
	pRightView->layout()->addWidget(m_pCanvasView);

	m_pLoggerWidget = new DQMLoggerWidget();
	m_pLoggerWidget->logView()->setMinimumHeight(200);
	pRightView->layout()->addWidget(m_pLoggerWidget);

	connect(m_pAutoUpdateButton, SIGNAL(clicked()), this, SLOT(handleAutoUpdateButtonClicked()));
	connect(pUpdateButton, SIGNAL(clicked()), this->getMonitoring()->getController(), SLOT(querySubscribedMonitorElements()));
	connect(pClearButton, SIGNAL(clicked()), this->getMonitoring()->getController(), SLOT(clearMonitoring()));
	connect(pBrowseButton, SIGNAL(clicked()), this->getMonitoring()->getController(), SLOT(openBrowser()));
}

//-------------------------------------------------------------------------------------------------

void DQMMonitoringView::log(const std::string &message)
{
	m_pLoggerWidget->log(MESSAGE, message);
}

//-------------------------------------------------------------------------------------------------

void DQMMonitoringView::log(LogLevel level, const std::string &message)
{
	m_pLoggerWidget->log(level, message);
}

//-------------------------------------------------------------------------------------------------

void DQMMonitoringView::buildStatusBar()
{
//	this->getMainWindow()->statusBar()->showMessage("Welcome", 3000);
}

//-------------------------------------------------------------------------------------------------

void DQMMonitoringView::showView()
{
	this->buildView();
	this->getMainWindow()->show();
	this->log("Welcome !");
}

//-------------------------------------------------------------------------------------------------

void DQMMonitoringView::hideView()
{
	this->buildView();
	this->getMainWindow()->showMinimized();
}

//-------------------------------------------------------------------------------------------------

void DQMMonitoringView::clear()
{
	m_pMonitorElementView->clear();
	m_pCanvasView->clear();

	this->getMonitoring()->getController()->setUpdateMode(false);
	m_pAutoUpdateButton->setText("Start update");
}

//-------------------------------------------------------------------------------------------------

void DQMMonitoringView::handleAutoUpdateButtonClicked()
{
	QPushButton *pButton = qobject_cast<QPushButton *>(sender());

	if(!pButton)
		return;

	// update view
	if(this->getMonitoring()->getController()->getUpdateMode())
	{
		pButton->setText("Start update");
		this->getMonitoring()->getController()->setUpdateMode(false);
	}
	else
	{
		pButton->setText("Stop update");
		this->getMonitoring()->getController()->setUpdateMode(true);
	}
}

} 

